From 5ec3867771997365dde0f49dbb2d35c418f3972d Mon Sep 17 00:00:00 2001
From: grishche <a.grishchenko@intel.com>
Date: Mon, 5 Feb 2018 16:21:34 +0200
Subject: [PATCH] hostapd-40-intolerant

---
 src/ap/acs.c           | 22 ++++++++++++++++++++--
 src/ap/acs.h           |  1 +
 src/ap/ieee802_11.h    |  3 +++
 src/ap/ieee802_11_ht.c | 39 ++++++++++++++++++++++++++++++++++-----
 src/drivers/driver.h   |  1 +
 5 files changed, 59 insertions(+), 7 deletions(-)

diff --git a/src/ap/acs.c b/src/ap/acs.c
index 2d7a0b6..67e2959 100644
--- a/src/ap/acs.c
+++ b/src/ap/acs.c
@@ -25,6 +25,7 @@
 #include <assert.h>
 #include "acs.h"
 #include "rrm.h"
+#include "ieee802_11.h"
 
 /*
  * Automatic Channel Selection
@@ -2161,7 +2162,8 @@ char acs_to_exclude_candidate(struct hostapd_iface *iface, u32 i, struct os_relt
     return ACS_EXCLUDE_INTOLERANT;
   }
 
-  if (mode->candidates[i].overlap40) {
+  if (mode->candidates[i].overlap40 &&
+    !os_reltime_expired(now, &mode->candidates[i].ts_overlap40, iface->conf->acs_to_degradation[T_LNTO])) {
     wpa_printf(MSG_DEBUG, "ACS: skip candidate %d, overlap40", i);
     return ACS_EXCLUDE_OVERLAP40;
   }
@@ -2393,7 +2395,8 @@ const char *sw_reasons[] = {
   "intolerant",
   "radar",
   "background scan",
-  "periodic update"
+  "periodic update",
+  "intolerant expired"
 };
 
 
@@ -2423,6 +2426,7 @@ int acs_set_new_chan_if_ok(struct hostapd_iface *iface, int min_rank_cand_idx, i
 
   /* got previous, now check threshold */
   if ((mode->selected_candidate < 0) || /* if previously selected candidate is not known - switch */
+      (mode->candidates[min_rank_cand_idx].width > actual_width) || /* If previously selected candidates width is less */
       (switch_reason == SWR_INTOLERANT) || (switch_reason == SWR_RADAR) || (switch_reason == SWR_INITIAL) || /* in these cases, switch regardless of threshold */
       (mode->candidates[mode->selected_candidate].rank == -1) || /* If previously selected candidates rank is now invalid, switch regardless of threshold*/
       ((mode->selected_candidate != min_rank_cand_idx) &&
@@ -3047,6 +3051,20 @@ void acs_switch_intolerant(struct hostapd_iface *iface)
     wpa_printf(MSG_ERROR, "Must switch, intolerant !");
 }
 
+void acs_switch_intolerant_expired(struct hostapd_iface *iface)
+{
+  int res;
+
+  res = acs_recalc_ranks_and_set_chan(iface, SWR_INTOLERANT_EXPIRED);
+  if (res == TRUE) {
+    if (acs_do_switch_channel(iface, 0) == TRUE && !iface->conf->secondary_channel)
+      /* reschedule timer if we didn't switch to 40 MHz bandwidth */
+      hostapd_restart_ap_ht2040_timer(iface);
+  } else
+    /* reschedule timer if we didn't switch at all */
+    hostapd_restart_ap_ht2040_timer(iface);
+}
+
 void acs_set_radar(struct hostapd_iface *iface, int freq, int chan_width, int cf1)
 {
   struct hostapd_hw_modes *mode = iface->current_mode;
diff --git a/src/ap/acs.h b/src/ap/acs.h
index 66fdded..eba3f35 100644
--- a/src/ap/acs.h
+++ b/src/ap/acs.h
@@ -16,6 +16,7 @@ enum hostapd_chan_status acs_init(struct hostapd_iface *iface);
 int acs_recalc_ranks_and_set_chan(struct hostapd_iface *iface, int switch_reason);
 void acs_update_intolerant_channels(struct hostapd_iface *iface, u8 chan);
 void acs_switch_intolerant(struct hostapd_iface *iface);
+void acs_switch_intolerant_expired(struct hostapd_iface *iface);
 void acs_set_radar(struct hostapd_iface *iface, int freq, int chan_width, int cf1);
 void acs_update_radar(struct hostapd_iface *iface);
 void acs_radar_switch(struct hostapd_iface *iface);
diff --git a/src/ap/ieee802_11.h b/src/ap/ieee802_11.h
index 1422c0f..5749406 100644
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -143,5 +143,8 @@ static inline u8 hostapd_mbo_ie_len(struct hostapd_data *hapd)
 void ap_copy_sta_supp_op_classes(struct sta_info *sta,
 				 const u8 *supp_op_classes,
 				 size_t supp_op_classes_len);
+#ifdef CONFIG_ACS
+void hostapd_restart_ap_ht2040_timer(struct hostapd_iface *iface);
+#endif
 
 #endif /* IEEE802_11_H */
diff --git a/src/ap/ieee802_11_ht.c b/src/ap/ieee802_11_ht.c
index 6023e54..030b0dd 100644
--- a/src/ap/ieee802_11_ht.c
+++ b/src/ap/ieee802_11_ht.c
@@ -306,6 +306,20 @@ static int is_40_allowed(struct hostapd_iface *iface, int channel)
 }
 
 
+#ifdef CONFIG_ACS
+void hostapd_restart_ap_ht2040_timer(struct hostapd_iface *iface)
+{
+  if (!iface->num_sta_ht40_intolerant) {
+    unsigned int delay_time;
+    delay_time = OVERLAPPING_BSS_TRANS_DELAY_FACTOR *
+      iface->conf->obss_interval;
+    eloop_cancel_timeout(ap_ht2040_timeout, iface, NULL);
+    eloop_register_timeout(delay_time, 0, ap_ht2040_timeout, iface, NULL);
+  }
+}
+#endif
+
+
 void hostapd_2040_coex_action(struct hostapd_data *hapd,
 			      const struct ieee80211_mgmt *mgmt, size_t len)
 {
@@ -403,6 +417,9 @@ void hostapd_2040_coex_action(struct hostapd_data *hapd,
     if ((iface->conf->acs_algo == ACS_ALGO_SMART) && iface->conf->acs_init_done) {
       acs_update_intolerant_channels(iface, iface->conf->channel);
       acs_switch_intolerant(iface);
+      if (iface->conf->obss_interval && !iface->conf->secondary_channel)
+        /* If switched to 20 MHz channel, restart timer */
+        hostapd_restart_ap_ht2040_timer(iface);
       return;
     }
 #endif
@@ -522,7 +539,12 @@ void hostapd_obss_beacon(struct hostapd_data *hapd,
 #ifdef CONFIG_ACS
       if ((iface->conf->acs_algo == ACS_ALGO_SMART) && iface->conf->acs_init_done) {
         acs_update_intolerant_channels(iface, iface->conf->channel);
-        acs_switch_intolerant(iface);
+        if (iface->conf->secondary_channel) {
+          acs_switch_intolerant(iface);
+          if (!iface->conf->secondary_channel)
+            /* If switched to 20 MHz channel, restart timer */
+            hostapd_restart_ap_ht2040_timer(iface);
+        }
       }
 			else
 #endif
@@ -731,10 +753,17 @@ void ap_ht2040_timeout(void *eloop_data, void *user_data)
 {
 	struct hostapd_iface *iface = eloop_data;
 
-	wpa_printf(MSG_INFO, "Switching to 40 MHz operation");
+#ifdef CONFIG_ACS
+  if ((iface->conf->acs_algo == ACS_ALGO_SMART) && iface->conf->acs_init_done) {
+    acs_switch_intolerant_expired(iface);
+  } else
+#endif
+  {
+    wpa_printf(MSG_INFO, "Switching to 40 MHz operation");
 
-	iface->conf->secondary_channel = iface->secondary_ch;
+    iface->conf->secondary_channel = iface->secondary_ch;
 
-	iface->chan_switch_reason = HAPD_CHAN_SWITCH_20_40_COEX;
-	ieee802_11_set_beacons(iface);
+    iface->chan_switch_reason = HAPD_CHAN_SWITCH_20_40_COEX;
+    ieee802_11_set_beacons(iface);
+  }
 }
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index e2492d8..211b888 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -288,6 +288,7 @@ enum {
   SWR_RADAR,
   SWR_BG_SCAN,
   SWR_UPDATE,
+  SWR_INTOLERANT_EXPIRED,
   SWR_LAST
 };
 
-- 
2.10.1

