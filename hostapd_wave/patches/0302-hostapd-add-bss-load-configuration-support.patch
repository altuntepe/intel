From 81537c916f27a35f2363144a254b04cf9308a295 Mon Sep 17 00:00:00 2001
From: grishche <a.grishchenko@intel.com>
Date: Tue, 6 Feb 2018 13:19:40 +0200
Subject: [PATCH] hostapd-add-bss-load-configuration-support

---
 hostapd/config_file.c        | 13 ++++++++++++-
 hostapd/ctrl_iface.c         | 45 ++++++++++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c        | 38 +++++++++++++++++++++++++++++++++++++
 src/ap/ap_config.h           |  1 +
 src/ap/ap_drv_ops.h          |  9 +++++++++
 src/ap/beacon.c              | 13 ++++++++++---
 src/ap/bss_load.c            | 20 ++++++++++++++++++++
 src/ap/bss_load.h            |  2 +-
 src/common/ltq-vendor.h      |  1 +
 src/drivers/driver.h         |  8 ++++++++
 src/drivers/driver_nl80211.c | 14 ++++++++++++++
 11 files changed, 159 insertions(+), 5 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index d81a384..f19a87b 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3106,7 +3106,18 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 				   line, bss->bss_load_update_period);
 			return 1;
 		}
-	} else if (os_strcmp(buf, "rts_threshold") == 0) {
+	}
+	else if (os_strcmp(buf, "enable_bss_load_ie") == 0) {
+		bss->enable_bss_load_ie = atoi(pos);
+		if (bss->enable_bss_load_ie < 0 ||
+			bss->enable_bss_load_ie > 1) {
+			wpa_printf(MSG_ERROR,
+				"Line %d: invalid enable_bss_load_ie %d",
+				line, bss->enable_bss_load_ie);
+			return 1;
+		}
+	}
+	else if (os_strcmp(buf, "rts_threshold") == 0) {
 		conf->rts_threshold = atoi(pos);
 		if (conf->rts_threshold < -1 || conf->rts_threshold > 65535) {
 			wpa_printf(MSG_ERROR,
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index fd8fd99..ae4be87 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -50,6 +50,7 @@
 #include "ap/wnm_ap.h"
 #include "ap/wpa_auth.h"
 #include "ap/acs.h"
+#include "ap/bss_load.h"
 #include "ap/hw_features.h"
 #include "ap/beacon.h"
 #include "ap/neighbor_db.h"
@@ -4988,6 +4989,46 @@ int hostapd_ctrl_iface_sta_allow(struct hostapd_data *hapd, const char *cmd)
   return ret;
 }
 
+int hostapd_ctrl_iface_set_bss_load(struct hostapd_data *hapd,
+  const char *cmd, char *buf, size_t buflen)
+{
+  int ret;
+  u8 is_enable;
+
+  hapd = get_bss_index(cmd, hapd->iface);
+  if (hapd == NULL) {
+    ret = os_snprintf(buf, buflen, "FAIL\n");
+    if (ret < 0 || (size_t)ret >= buflen)
+      return 0;
+    return ret;
+  }
+
+  cmd = os_strchr(cmd, ' ');
+  if (cmd) {
+    cmd++;
+    is_enable = atoi(cmd);
+    if (is_enable > 1) {
+      wpa_printf(MSG_ERROR, "set_bss_load: invalid value");
+      return -1;
+    }
+  }
+  else {
+    ret = os_snprintf(buf, buflen, "FAIL\n");
+    if (ret < 0 || (size_t)ret >= buflen)
+      return 0;
+    return ret;
+  }
+
+  ret = bss_load_enable(hapd, is_enable);
+  if (ret) {
+    ret = os_snprintf(buf, buflen, "FAIL\n");
+    if (ret < 0 || (size_t)ret >= buflen)
+      return 0;
+    return ret;
+  }
+
+  return 0;
+}
 
 int hostapd_ctrl_iface_get_sta_measurements(struct hostapd_data *hapd,
   const char *cmd, char *buf, size_t buflen)
@@ -6493,6 +6534,10 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		printf("%s; *** Received from FAPI: 'STA_ALLOW' (buf= '%s') ***\n", __FUNCTION__, buf);
 		if (hostapd_ctrl_iface_sta_allow(hapd, buf + 9))
 			reply_len = -1;
+    } else if (os_strncmp(buf, "SET_BSS_LOAD ", 13) == 0) {
+        printf("%s; *** Received: 'SET_BSS_LOAD' (buf= '%s') ***\n", __FUNCTION__, buf);
+        reply_len = hostapd_ctrl_iface_set_bss_load(hapd, buf + 13, reply,
+                    reply_size);
 	} else if (os_strncmp(buf, "GET_STA_MEASUREMENTS ", 21) == 0) {
 		printf("%s; *** Received from FAPI: 'GET_STA_MEASUREMENTS' (buf= '%s') ***\n", __FUNCTION__, buf);
 		reply_len = hostapd_ctrl_iface_get_sta_measurements(hapd, buf + 21, reply,
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 64b84d2..744364f 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1649,6 +1649,42 @@ static int hostapd_cli_cmd_unconnected_sta(struct wpa_ctrl *ctrl,
 }
 
 
+static int hostapd_cli_cmd_set_bss_load(struct wpa_ctrl *ctrl, int argc,
+    char *argv[])
+{
+  char cmd[256];
+  int res;
+  int total, i;
+
+  if (argc != 2) {
+    printf("Invalid SET_BSS_LOAD command\n"
+           "usage: <BSS_name> <0/1>\n");
+    return -1;
+  }
+
+  res = os_snprintf(cmd, sizeof(cmd), "SET_BSS_LOAD");
+  if (os_snprintf_error(sizeof(cmd) - 1, res))
+    goto err;
+
+  total = 0;
+  for (i = 0; i < argc; i++) {
+    total += res;
+    if ((res < 0) || (total >= (sizeof(cmd) - 1)))
+      goto err;
+    res = os_snprintf(cmd + total, sizeof(cmd) - total, " %s", argv[i]);
+  }
+  total += res;
+  if ((res < 0) || (total >= (sizeof(cmd) - 1)))
+    goto err;
+
+  return wpa_ctrl_command(ctrl, cmd);
+
+err:
+  printf("Too long SET_BSS_LOAD command.\n");
+  return -1;
+}
+
+
 static int hostapd_cli_cmd_sta_measurements(struct wpa_ctrl *ctrl, int argc,
   char *argv[])
 {
@@ -2082,6 +2118,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "unconnected_sta", hostapd_cli_cmd_unconnected_sta, NULL,
 	  "<addr> <freq> <center_freq1=> [center_freq2=] <bandwidth=>\n"
 	  "get unconnected station statistics" },
+	{ "set_bss_load", hostapd_cli_cmd_set_bss_load, NULL,
+	  "<BSS name> <1/0> = set BSS Load IE in beacon and probe resp" },
 	{ "sta_measurements", hostapd_cli_cmd_sta_measurements, NULL,
 	  "<BSS_name> <addr> get station measurements" },
 	{ "vap_measurements", hostapd_cli_cmd_vap_measurements, NULL,
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 84d1cde..af434ba 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -245,6 +245,7 @@ struct hostapd_bss_config {
 
 	int dtim_period;
 	int bss_load_update_period;
+	int enable_bss_load_ie;
 
 	int ieee802_1x; /* use IEEE 802.1X */
 	int eapol_version;
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index 9311362..8e2ea24 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -412,6 +412,15 @@ static inline int hostapd_drv_sta_allow(struct hostapd_data *hapd,
   return hapd->driver->sta_allow(hapd->drv_priv, stations, count);
 }
 
+static inline int hostapd_drv_set_bss_load(struct hostapd_data *hapd,
+  const u8 is_enable)
+{
+  if (hapd->driver == NULL || hapd->driver->set_bss_load == NULL)
+    return -ENOTSUP;
+
+  return hapd->driver->set_bss_load(hapd->drv_priv, is_enable);
+}
+
 static inline int hostapd_drv_get_sta_measurements(struct hostapd_data *hapd,
   const u8 *addr, mtlk_sta_info_t *sta_info)
 {
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index fe25a84..ac8f90f 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -49,10 +49,11 @@ static u8 * hostapd_eid_bss_load(struct hostapd_data *hapd, u8 *eid, size_t len)
 	}
 #endif /* CONFIG_TESTING_OPTIONS */
 
-    if (!hapd->conf->hs20)
-        return eid;
+	if ((!hapd->conf->hs20) &&
+		(!hapd->conf->enable_bss_load_ie))
+		return eid;
 
-    /* generated BSS Load IE, will be updated by driver */
+	/* generated BSS Load IE, will be updated by driver */
 	*eid++ = WLAN_EID_BSS_LOAD;
 	*eid++ = 5;
 	eid += 5;
@@ -1314,6 +1315,12 @@ int ieee802_11_set_beacon(struct hostapd_data *hapd)
 
 	hapd->beacon_set_done = 1;
 
+	/* notify the driver to affect the BSS Load in the beacon frame */
+	if (hostapd_drv_set_bss_load(hapd, hapd->conf->enable_bss_load_ie) < 0) {
+		wpa_printf(MSG_ERROR, "Failed to set bss load in driver");
+		return -1;
+	}
+
 	if (ieee802_11_build_ap_params(hapd, &params) < 0)
 		return -1;
 
diff --git a/src/ap/bss_load.c b/src/ap/bss_load.c
index fb63942..9a91354 100644
--- a/src/ap/bss_load.c
+++ b/src/ap/bss_load.c
@@ -63,3 +63,23 @@ void bss_load_update_deinit(struct hostapd_data *hapd)
 {
 	eloop_cancel_timeout(update_channel_utilization, hapd, NULL);
 }
+
+
+int bss_load_enable(struct hostapd_data *hapd, int is_enable)
+{
+	struct hostapd_bss_config *conf;
+
+	if (!hapd)
+		return -1;
+
+	conf = hapd->conf;
+	if (!conf)
+		return -1;
+
+	/* set internal hostapd configuration of the probe resp frame */
+	conf->enable_bss_load_ie = is_enable;
+
+	/* update the beacon frame */
+	ieee802_11_set_beacon(hapd);
+	return 0;
+}
diff --git a/src/ap/bss_load.h b/src/ap/bss_load.h
index ac3c793..b92c714 100644
--- a/src/ap/bss_load.h
+++ b/src/ap/bss_load.h
@@ -12,6 +12,6 @@
 
 int bss_load_update_init(struct hostapd_data *hapd);
 void bss_load_update_deinit(struct hostapd_data *hapd);
-
+int bss_load_enable(struct hostapd_data *hapd, int is_enable);
 
 #endif /* BSS_LOAD_UPDATE_H */
diff --git a/src/common/ltq-vendor.h b/src/common/ltq-vendor.h
index 5710f90..2bad35b 100644
--- a/src/common/ltq-vendor.h
+++ b/src/common/ltq-vendor.h
@@ -48,6 +48,7 @@ enum ltq_nl80211_vendor_subcmds {
 	LTQ_NL80211_VENDOR_SUBCMD_SET_WDS_WPA_STA      = 15,
   LTQ_NL80211_VENDOR_SUBCMD_BLOCK_TX             = 16, /* Block TX after next channel switch */
 	LTQ_NL80211_VENDOR_SUBCMD_SET_DGAF_DISABLED    = 17,
+	LTQ_NL80211_VENDOR_SUBCMD_SET_BSS_LOAD         = 18,
 };
 
 enum ltq_nl80211_vendor_events {
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index a2a5bcf..0d1420c 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -3759,6 +3759,14 @@ struct wpa_driver_ops {
   int (*sta_allow)(void *priv, const u8 *stations, int count);
 
   /**
+   * set_bss_load - Set BSS Load IE in Beacon
+   * @priv: Private driver interface data
+   * @enable: 0 disable, 1 enable, of the BSS load IE
+   * Returns: 0 on success, -1 on failure
+   */
+  int(*set_bss_load)(void *priv, const u8 enable);
+
+  /**
    * get_sta_measurements - Get station measurements
    * @priv: Private driver interface data
    * @sta_addr: Station MAC address
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 00f4f09..48aab73 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -5815,6 +5815,19 @@ int nl80211_sta_allow(void *priv, const u8 *stations, int count)
 }
 
 
+int nl80211_set_bss_load(void *priv, const u8 is_enable)
+{
+  int ret = nl80211_vendor_cmd(priv, OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_SET_BSS_LOAD,
+    &is_enable, 1, NULL);
+
+  if (ret < 0)
+    wpa_printf(MSG_ERROR, "nl80211: sending SET_BSS_LOAD failed: %i (%s)",
+      ret, strerror(-ret));
+
+  return ret;
+}
+
+
 int nl80211_get_sta_measurements(void *priv, const u8 *sta_addr,
   mtlk_sta_info_t *sta_info)
 {
@@ -9916,6 +9929,7 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.set_deny_mac_addr = nl80211_set_deny_mac_addr,
 	.sta_steer = nl80211_sta_steer,
 	.sta_allow = nl80211_sta_allow,
+	.set_bss_load = nl80211_set_bss_load,
 	.get_sta_measurements = nl80211_get_sta_measurements,
 	.get_vap_measurements = nl80211_get_vap_measurements,
 	.get_radio_info = nl80211_get_radio_info,
-- 
2.10.1

