From cfa431b91dc10a7baa3a66d67bea239abee8d4ed Mon Sep 17 00:00:00 2001
From: omerefrx <omerx.efrat@intel.com>
Date: Tue, 27 Mar 2018 17:07:24 +0300
Subject: [PATCH] Allow dynamic changes to slave BSS's

---
 hostapd/ctrl_iface.c  |  41 ++++++++++++++
 hostapd/hostapd_cli.c |  29 ++++++++++
 src/ap/hostapd.c      | 154 ++++++++++++++++++++++++++++++++++++++++++++++++++
 src/ap/hostapd.h      |   1 +
 4 files changed, 225 insertions(+)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index ae4be87..f00354f 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -1665,6 +1665,44 @@ static int hostapd_ctrl_iface_reload(struct hostapd_iface *iface)
 }
 
 
+static int hostapd_ctrl_iface_reconf(struct hostapd_iface *iface,
+		char *param)
+{
+	int i, bss_idx = -1;
+
+	while (param[0] == ' ')
+		param++;
+
+	if (iface->cac_started) {
+		wpa_printf(MSG_ERROR, "Reconfig cannot be done while CAC");
+		return -1;
+	}
+
+	if (os_strlen(param) > 0) {
+		for (i = 0; i < iface->num_bss; i++) {
+			struct hostapd_data *bss = iface->bss[i];
+
+			if (!strncmp(bss->conf->iface, param, IFNAMSIZ)) {
+				bss_idx = i;
+				break;
+			}
+		}
+
+		if (bss_idx == 0) {
+			wpa_printf(MSG_ERROR, "Reconfig of master BSS is illegal");
+			return -1;
+		}
+	}
+
+	if (hostapd_reconf_iface(iface, bss_idx) < 0) {
+		wpa_printf(MSG_ERROR, "Reconfig of interface failed");
+		return -1;
+	}
+
+	return 0;
+}
+
+
 static int hostapd_ctrl_iface_disable(struct hostapd_iface *iface)
 {
 	if (hostapd_disable_iface(iface) < 0) {
@@ -6477,6 +6515,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "RELOAD", 6) == 0) {
 		if (hostapd_ctrl_iface_reload(hapd->iface))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "RECONF", 6) == 0) {
+		if (hostapd_ctrl_iface_reconf(hapd->iface, buf + 6))
+			reply_len = -1;
 	} else if (os_strncmp(buf, "DISABLE", 7) == 0) {
 		if (hostapd_ctrl_iface_disable(hapd->iface))
 			reply_len = -1;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 744364f..5b5c166 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1182,6 +1182,30 @@ static int hostapd_cli_cmd_reload(struct wpa_ctrl *ctrl, int argc,
 }
 
 
+static int hostapd_cli_cmd_reconf(struct wpa_ctrl *ctrl, int argc,
+				      char *argv[])
+{
+	char cmd[256];
+	int res;
+
+	if (argc == 0) {
+		os_snprintf(cmd, sizeof(cmd), "RECONF");
+	} else if (argc == 1) {
+		res = os_snprintf(cmd, sizeof(cmd), "RECONF %s",
+				  argv[0]);
+		if (os_snprintf_error(sizeof(cmd), res)) {
+			printf("Too long RECONF command.\n");
+			return -1;
+		}
+	} else {
+		printf("Invalid reconf command: needs 0-1 arguments\n");
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
+}
+
+
 static int hostapd_cli_cmd_disable(struct wpa_ctrl *ctrl, int argc,
 				      char *argv[])
 {
@@ -2077,6 +2101,11 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "acs_recalc", hostapd_cli_cmd_acs_recalc, NULL, NULL },
 	{ "enable", hostapd_cli_cmd_enable, NULL, NULL },
 	{ "reload", hostapd_cli_cmd_reload, NULL, NULL },
+	{ "reconf", hostapd_cli_cmd_reconf, NULL,
+	  "[BSS name] = reconfigure interface (add/remove BSS's while other BSS "
+	  "are unaffected)\n"
+	  "  if BSS name is given, that BSS will be reloaded (main BSS isn't "
+	  "supported)" },
 	{ "disable", hostapd_cli_cmd_disable, NULL, NULL },
 	{ "erp_flush", hostapd_cli_cmd_erp_flush, NULL, NULL },
 	{ "log_level", hostapd_cli_cmd_log_level, NULL, NULL },
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 0343ffc..2740137 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -58,6 +58,7 @@ static int hostapd_setup_encryption(char *iface, struct hostapd_data *hapd);
 static int hostapd_broadcast_wep_clear(struct hostapd_data *hapd);
 static int setup_interface2(struct hostapd_iface *iface);
 static void channel_list_update_timeout(void *eloop_ctx, void *timeout_ctx);
+static int hostapd_remove_bss(struct hostapd_iface *iface, unsigned int idx);
 
 
 int hostapd_for_each_interface(struct hapd_interfaces *interfaces,
@@ -2549,6 +2550,159 @@ int hostapd_enable_iface(struct hostapd_iface *hapd_iface)
 }
 
 
+static int hostapd_config_get_missing_bss(struct hostapd_config *conf,
+		struct hostapd_config *new_conf)
+{
+	size_t i, j;
+	Boolean found;
+
+	for (i = 0; i < conf->num_bss; i++) {
+		found = FALSE;
+		for (j = 0; j < new_conf->num_bss; j++) {
+			if (os_strcmp(conf->bss[i]->iface, new_conf->bss[j]->iface) == 0) {
+				found = TRUE;
+				break;
+			}
+		}
+
+		if (!found)
+			return i;
+	}
+
+	return -1;
+}
+
+
+static int hostapd_add_bss(struct hostapd_iface *iface,
+		struct hostapd_config *new_conf, int new_bss_idx)
+{
+	struct hostapd_bss_config **tmp_conf_arr;
+	struct hostapd_data **tmp_bss_arr;
+	struct hostapd_data *hapd;
+	int i, res;
+	const char *ifname;
+
+	ifname = new_conf->bss[new_bss_idx]->iface;
+	wpa_printf(MSG_INFO, "%s, ifname=%s", __func__, ifname);
+
+	/* Reallocate conf & bss arrays for new BSS */
+	tmp_conf_arr = os_realloc_array(
+			iface->conf->bss, iface->conf->num_bss + 1,
+			sizeof(struct hostapd_bss_config *));
+	if (tmp_conf_arr == NULL) {
+		res = -ENOMEM;
+		goto fail_conf_arr_realloc;
+	}
+	iface->conf->bss = tmp_conf_arr;
+	iface->conf->num_bss++;
+
+	tmp_bss_arr = os_realloc_array(iface->bss, iface->num_bss + 1,
+			sizeof(struct hostapd_data *));
+
+	if (tmp_bss_arr == NULL) {
+		res = -ENOMEM;
+		goto fail_bss_arr_realloc;
+	}
+	iface->bss = tmp_bss_arr;
+	iface->num_bss++;
+
+	/* Move bss_config from new conf to current conf */
+	iface->conf->bss[iface->conf->num_bss - 1] = new_conf->bss[new_bss_idx];
+
+	iface->conf->last_bss = new_conf->bss[new_bss_idx];
+	new_conf->num_bss--;
+	for (i = new_bss_idx; i < new_conf->num_bss; i++)
+		new_conf->bss[i] = new_conf->bss[i + 1];
+
+	/* allocating new bss data */
+	hapd = hostapd_alloc_bss_data(iface, iface->conf,
+			iface->conf->last_bss);
+	if (hapd == NULL){
+		res = -ENOMEM;
+		goto fail_bss_data_alloc;
+	}
+
+	hapd->msg_ctx = hapd;
+	iface->bss[iface->num_bss - 1] = hapd;
+
+	if (hostapd_setup_bss(hapd, FALSE)) {
+		res = -EINVAL;
+		goto fail_setup_bss;
+	}
+
+	/* send set WMM to driver for new BSS */
+	hostapd_tx_queue_params(iface->bss[iface->num_bss - 1]);
+
+	return 0;
+
+fail_setup_bss:
+	os_free(hapd);
+fail_bss_data_alloc:
+	iface->bss[iface->num_bss - 1] = NULL;
+	iface->num_bss--;
+fail_bss_arr_realloc:
+	iface->conf->bss[iface->conf->num_bss - 1] = NULL;
+	iface->conf->num_bss--;
+fail_conf_arr_realloc:
+	return res;
+}
+
+
+int hostapd_reconf_iface(struct hostapd_iface *hapd_iface, int changed_idx)
+{
+	struct hostapd_config *new_conf = NULL;
+	int idx, res;
+	Boolean found_missing_bss;
+
+	wpa_printf(MSG_DEBUG, "Reconf interface %s",
+			   hapd_iface->conf->bss[0]->iface);
+	if (hapd_iface->interfaces == NULL ||
+		hapd_iface->interfaces->config_read_cb == NULL)
+		return -1;
+	new_conf = hapd_iface->interfaces->config_read_cb(hapd_iface->config_fname);
+	if (new_conf == NULL)
+		return -EINVAL;
+
+	if (changed_idx > 0)
+		/* changed_idx is a BSS index that needs to be modified.
+		 * Instead of really modifying, we will just remove and add the BSS.
+		 * This is better because some BSS configurations must be set
+		 * to firmware before add VAP is made.
+		 */
+		hostapd_remove_bss(hapd_iface, changed_idx);
+
+	/* Find BSS needed to be removed */
+	do {
+		idx = hostapd_config_get_missing_bss(hapd_iface->conf, new_conf);
+		/* zero isn't a valid index because we don't support
+		 * removing master BSS */
+		found_missing_bss = idx > 0;
+		if (found_missing_bss)
+			hostapd_remove_bss(hapd_iface, idx);
+	} while (found_missing_bss);
+
+	/* Find BSS needed to be added */
+	do {
+		idx = hostapd_config_get_missing_bss(new_conf, hapd_iface->conf);
+		/* zero isn't a valid index because there must be at least 1 BSS */
+		found_missing_bss = idx > 0;
+		if (found_missing_bss) {
+			res = hostapd_add_bss(hapd_iface, new_conf, idx);
+			if (res) {
+				wpa_printf(MSG_ERROR, "Failed adding new BSS (%s), res=%d",
+						new_conf->bss[idx]->iface, res);
+				hostapd_config_free(new_conf);
+				return -1;
+			}
+		}
+	} while (found_missing_bss);
+
+	hostapd_config_free(new_conf);
+
+	return 0;
+}
+
+
 int hostapd_reload_iface(struct hostapd_iface *hapd_iface)
 {
 	size_t j;
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 69d9e7f..c1553b5 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -544,6 +544,7 @@ void hostapd_new_assoc_sta(struct hostapd_data *hapd, struct sta_info *sta,
 			   int reassoc);
 void hostapd_interface_deinit_free(struct hostapd_iface *iface);
 int hostapd_enable_iface(struct hostapd_iface *hapd_iface);
+int hostapd_reconf_iface(struct hostapd_iface *hapd_iface, int changed_idx);
 int hostapd_reload_iface(struct hostapd_iface *hapd_iface);
 int hostapd_disable_iface(struct hostapd_iface *hapd_iface);
 int hostapd_add_iface(struct hapd_interfaces *ifaces, char *buf);
-- 
2.10.1

