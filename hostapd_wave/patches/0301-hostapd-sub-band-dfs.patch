From 4e1ecbf13320d8562654982f50ae2fb83f8087d4 Mon Sep 17 00:00:00 2001
From: vulsmike <mikelis.vuls@intel.com>
Date: Wed, 27 Jun 2018 09:32:39 +0300
Subject: [PATCH] hostapd-sub-band-dfs

---
 hostapd/config_file.c              |   7 +
 hostapd/ctrl_iface.c               |  45 +++
 hostapd/hostapd_cli.c              |  22 ++
 src/ap/ap_config.h                 |   1 +
 src/ap/dfs.c                       | 555 ++++++++++++++++++++++++++++++++++++-
 src/ap/dfs.h                       |   2 +-
 src/ap/drv_callbacks.c             |   2 +-
 src/ap/hostapd.c                   |  23 ++
 src/ap/hostapd.h                   |  27 ++
 src/drivers/driver.h               |   2 +
 src/drivers/driver_nl80211.c       |   9 +
 src/drivers/driver_nl80211_event.c |   3 +
 wpa_supplicant/ap.c                |   2 +-
 13 files changed, 691 insertions(+), 9 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index c4e630e..d81a384 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2276,6 +2276,13 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->ieee80211d = atoi(pos);
 	} else if (os_strcmp(buf, "ieee80211h") == 0) {
 		conf->ieee80211h = atoi(pos);
+	} else if (os_strcmp(buf, "sub_band_dfs") == 0) {
+		conf->sub_band_dfs = atoi(pos);
+		if (conf->sub_band_dfs < 0 ||
+		    conf->sub_band_dfs > 60) {
+			wpa_printf(MSG_ERROR, "Invalid sub_band_dfs value, must be in range 0..60");
+			return 1;
+		}
 	} else if (os_strcmp(buf, "ieee8021x") == 0) {
 		bss->ieee802_1x = atoi(pos);
 	} else if (os_strcmp(buf, "eapol_version") == 0) {
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 9bd16b9..fd8fd99 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -6208,6 +6208,48 @@ int hostapd_ctrl_iface_get_hw_features(struct hostapd_iface *iface,
   return len;
 }
 
+static int hostapd_ctrl_iface_get_dfs_stats (struct hostapd_iface *iface, const char *cmd,
+					     char *buf, size_t buflen)
+{
+	struct os_tm tm;
+	int ret = 0, len = 0;
+	hostapd_dfs_history_t *entry;
+	const char *month_str = "Jan\0Feb\0Mar\0Apr\0May\0Jun\0"
+				"Jul\0Aug\0Sep\0Oct\0Nov\0Dec";
+
+	ret = os_snprintf(buf + len, buflen - len, "Sub Band DFS configured counter value %d\n",
+		          iface->conf->sub_band_dfs);
+	if (ret >= buflen - len || ret < 0)
+		return len;
+	len += ret;
+
+	ret = os_snprintf(buf + len, buflen - len, "Sub Band DFS current counter value %d\n",
+		          iface->sb_dfs_cntr ? iface->sb_dfs_cntr - 1 : 0);
+	if (ret >= buflen - len || ret < 0)
+		return len;
+	len += ret;
+
+	/* DFS History statistics */
+	ret = os_snprintf(buf + len, buflen - len, "Radar detection history, last %d radar detections:\n", MAX_DFS_HIST_ENTRIES);
+	if (ret >= buflen - len || ret < 0)
+		return len;
+	len += ret;
+
+	dl_list_for_each(entry, &iface->dfs_history, hostapd_dfs_history_t, list) {
+		if (os_gmtime(entry->detect_time, &tm))
+			os_memset(&tm, 0, sizeof(tm));
+
+		ret = os_snprintf(buf + len, buflen - len, "%s %d %02d:%02d:%02d UTC: center chan %d, prim %d, bw %d, rbm 0x%02x, %s\n",
+				  &month_str[4 * (tm.month - 1)], tm.day, tm.hour, tm.min, tm.sec, entry->seg0_idx, entry->primary, entry->bandwidth, entry->rbm,
+				  entry->type == DFS_CHAN_SWITCH ? "new chan switch" : (entry->type == DFS_NO_SWITCH ? "no channel switch" : "sub band switch"));
+
+		if (ret >= buflen - len || ret < 0)
+			return len;
+		len += ret;
+	}
+
+	return len;
+}
 
 static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
@@ -6573,6 +6615,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
   } else if (os_strncmp(buf, "GET_HW_FEATURES", 15) == 0) {
     reply_len = hostapd_ctrl_iface_get_hw_features(hapd->iface, NULL, reply,
       reply_size);
+	} else if (os_strncmp(buf, "GET_DFS_STATS", 13) == 0) {
+		reply_len = hostapd_ctrl_iface_get_dfs_stats(hapd->iface, NULL, reply,
+							     reply_size);
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index e144644..64b84d2 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1924,6 +1924,26 @@ static int hostapd_cli_cmd_get_hw_features(struct wpa_ctrl *ctrl, int argc,
   return wpa_ctrl_command(ctrl, cmd);
 }
 
+static int hostapd_cli_cmd_get_dfs_stats (struct wpa_ctrl *ctrl, int argc,
+					  char *argv[])
+{
+	char cmd[256];
+	int res;
+
+	if (argc != 0) {
+		printf("get_hw_features doesn't require parameters\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "GET_DFS_STATS");
+	if (res < 0 || (size_t) res >= sizeof(cmd) - 1) {
+		printf("Too long GET_DFS_STATS command.\n");
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2091,6 +2111,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 #if 0
   { "antennas_set", hostapd_cli_cmd_antennas_set, NULL, "<mask> set antenna mask"},
 #endif
+	{ "get_dfs_stats", hostapd_cli_cmd_get_dfs_stats, NULL,
+	  "get Sub band DFS and radar detected per channel stats" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 8e21162..84d1cde 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -672,6 +672,7 @@ struct hostapd_config {
 	int ieee80211d;
 
 	int ieee80211h; /* DFS */
+	int sub_band_dfs; /* Sub Band DFS */
 
 	/*
 	 * Local power constraint is an octet encoded as an unsigned integer in
diff --git a/src/ap/dfs.c b/src/ap/dfs.c
index 5b63573..c73471e 100644
--- a/src/ap/dfs.c
+++ b/src/ap/dfs.c
@@ -21,6 +21,7 @@
 #include "acs.h"
 #include "hw_features.h"
 #include "../hostapd/ctrl_iface.h"
+#include "drivers/nl80211_copy.h"
 
 /* Must be aligned with driver structure */
 struct vendor_cac_data
@@ -536,7 +537,7 @@ static int set_dfs_state_freq(struct hostapd_iface *iface, int freq, u32 state)
 
 static int set_dfs_state(struct hostapd_iface *iface, int freq, int ht_enabled,
 			 int chan_offset, int chan_width, int cf1,
-			 int cf2, u32 state)
+			 int cf2, u8 rbm, u32 state)
 {
 	int n_chans = 1, i;
 	struct hostapd_hw_modes *mode;
@@ -581,7 +582,13 @@ static int set_dfs_state(struct hostapd_iface *iface, int freq, int ht_enabled,
 	wpa_printf(MSG_DEBUG, "DFS freq: %dMHz, n_chans: %d", frequency,
 		   n_chans);
 	for (i = 0; i < n_chans; i++) {
-		ret += set_dfs_state_freq(iface, frequency, state);
+		if (rbm) {
+			if (rbm & 1 << i)
+				ret += set_dfs_state_freq(iface, frequency, state);
+		}
+		else {
+			ret += set_dfs_state_freq(iface, frequency, state);
+		}
 		frequency = frequency + 20;
 	}
 
@@ -839,7 +846,7 @@ int hostapd_dfs_complete_cac(struct hostapd_iface *iface, int success, int freq,
 				iface->cac_started = 0;
 		} else {
 			set_dfs_state(iface, freq, ht_enabled, chan_offset,
-				      chan_width, cf1, cf2,
+				      chan_width, cf1, cf2, 0,
 				      HOSTAPD_CHAN_DFS_AVAILABLE);
 #ifdef CONFIG_ACS
       if (iface->conf->acs_init_done)
@@ -1206,11 +1213,461 @@ void hostapd_send_dfs_debug_channel_flag(struct hostapd_iface *iface)
 		wpa_printf(MSG_INFO, "Failed to send driver vendor command LTQ_NL80211_VENDOR_SUBCMD_DFS_DEBUG");
 }
 
+#define NUM_MAX_CHANS_IN_CHANDEF 8
+
+static int
+hostapd_get_num_chans (struct hostapd_iface *iface, u8 vht_oper_chwidth, int secondary)
+{
+	int n_chans = 1;
+
+	if (iface->conf->ieee80211n && secondary)
+		n_chans = 2;
+
+	if (iface->conf->ieee80211ac) {
+		switch (vht_oper_chwidth) {
+		case VHT_CHANWIDTH_USE_HT:
+			break;
+		case VHT_CHANWIDTH_80MHZ:
+			n_chans = 4;
+			break;
+		case VHT_CHANWIDTH_160MHZ:
+			n_chans = 8;
+			break;
+		case VHT_CHANWIDTH_80P80MHZ:
+			n_chans = 4;
+			break;
+		default:
+			break;
+		}
+	}
+
+	return n_chans;
+}
+
+static int
+hostapd_get_low_chan_idx (struct hostapd_iface *iface, u8 centr_freq_seg0_idx, u8 chwidth, u8 primary, int secondary)
+{
+	int i;
+	u8 low_chan;
+	int idx = -1;
+	struct hostapd_channel_data *chan;
+	struct hostapd_hw_modes *mode = iface->current_mode;
+
+	if (!mode)
+		return idx;
+
+	if (iface->conf->ieee80211ac && chwidth >= VHT_CHANWIDTH_80MHZ) {
+		low_chan = centr_freq_seg0_idx - get_num_width(chwidth, secondary)/2/5 + 2;
+	}
+	else {
+		if (secondary >= 0)
+			low_chan = primary;
+		else
+			low_chan = primary - 4;
+	}
+
+	for (i = 0; i < mode->num_channels; i++) {
+		chan = &mode->channels[i];
+		if (chan->chan == low_chan) {
+			idx = i;
+			break;
+		}
+	}
+
+	return idx;
+}
+
+static int
+hostapd_sub_dfs_get_new_chan (struct hostapd_iface *iface,
+			      int *new_bw, int *secondary_offset)
+{
+	int i;
+	u8 cons_no_radar = 0; /* Consecutive no radar channels */
+	u8 prev_no_radar_idx = 0;
+	u8 do_sb_switch = 0;
+	u8 last_cons_chan_idx = 0;
+	u8 max_cons_no_radar = 0;
+	u8 max_last_cons_chan_idx = 0;
+	int n_chans, n_chans1;
+	struct hostapd_hw_modes *mode;
+	u8 radar_vs_channel_map[NUM_MAX_CHANS_IN_CHANDEF][2] = {{0}};
+	struct hostapd_channel_data *chan;
+	int start_chan_idx, start_chan_idx1;
+
+	mode = iface->current_mode;
+	if (!mode)
+		return 0;
+
+	if (hostapd_csa_in_progress(iface)) {
+		wpa_printf(MSG_INFO, "SB DFS: CSA already in progress, ignore");
+		return -1;
+	}
+
+	if (iface->cac_started) {
+		wpa_printf(MSG_INFO, "SB DFS: CAC in progress, will switch to new channel");
+		return 0;
+	}
+
+	if (iface->sb_dfs_cntr > iface->conf->sub_band_dfs) {
+		wpa_printf(MSG_INFO, "SB DFS: Counter exceeded, will switch to new channel");
+		return 0;
+	}
+
+	if (iface->sb_dfs_cntr) {
+		start_chan_idx = hostapd_get_low_chan_idx(iface, iface->sb_orig_chandef.vht_oper_centr_freq_seg0_idx,
+							  iface->sb_orig_chandef.vht_oper_chwidth,
+							  iface->sb_orig_chandef.channel,
+							  iface->sb_orig_chandef.secondary_offset);
+		n_chans = hostapd_get_num_chans(iface, iface->sb_orig_chandef.vht_oper_chwidth, iface->sb_orig_chandef.secondary_offset);
+	}
+	else {
+		start_chan_idx = dfs_get_start_chan_idx(iface, &start_chan_idx1);
+		n_chans = dfs_get_used_n_chans(iface, &n_chans1);
+	}
+
+	if (-1 == start_chan_idx) {
+		wpa_printf(MSG_ERROR, "SB DFS: Cannot get start channel index");
+		return 0;
+	}
+
+	wpa_printf(MSG_DEBUG, "SB DFS: n_chans %d, start idx %d", n_chans, start_chan_idx);
+
+	for (i = 0; i < n_chans; i++) {
+		chan = &mode->channels[start_chan_idx + i];
+		radar_vs_channel_map[i][0] = chan->chan;
+
+		if (!(chan->flag & HOSTAPD_CHAN_RADAR)) {
+			do_sb_switch = 1;
+			continue;
+		}
+
+		if ((chan->flag & HOSTAPD_CHAN_DFS_MASK) == HOSTAPD_CHAN_DFS_UNAVAILABLE)
+			radar_vs_channel_map[i][1] = 1;
+		else
+			do_sb_switch = 1;
+	}
+
+	if (!do_sb_switch) /* All channels UNAVAILABLE */
+		return 0;
+
+	for (i = 0; i < n_chans; i++) {
+		if (!radar_vs_channel_map[i][1]) {
+			if (0 == cons_no_radar || (i == prev_no_radar_idx + 1)) {
+				cons_no_radar++;
+				last_cons_chan_idx = i;
+			}
+			prev_no_radar_idx = i;
+		}
+		else {
+			if (cons_no_radar > max_cons_no_radar) {
+				max_cons_no_radar = cons_no_radar;
+				max_last_cons_chan_idx = last_cons_chan_idx;
+			}
+			cons_no_radar = 0;
+		}
+	}
+
+	if (max_cons_no_radar > cons_no_radar) {
+		cons_no_radar = max_cons_no_radar;
+		last_cons_chan_idx = max_last_cons_chan_idx;
+	}
+
+	wpa_printf(MSG_DEBUG, "SB DFS: Consecutive no radar channels: %d", cons_no_radar);
+
+	for (i = 0; i < n_chans; i++) {
+		wpa_printf(MSG_DEBUG, "SB DFS: Chan[%i] = %d, radar = %d", i, radar_vs_channel_map[i][0], radar_vs_channel_map[i][1]);
+	}
+
+	if (cons_no_radar == n_chans) {
+		wpa_printf(MSG_INFO, "SB DFS: All channels are available, wrong bit map provided?");
+		return -1;
+	}
+
+	/* This sub band selection makes sure secondary channel offset will be 1 if not 20 MHz bw chosen */
+	*secondary_offset = 1;
+	switch (cons_no_radar) {
+	case 1:
+		*new_bw = CHAN_WIDTH_20;
+		*secondary_offset = 0;
+		return radar_vs_channel_map[last_cons_chan_idx][0];
+	case 2:
+		if (last_cons_chan_idx % 2) {
+			*new_bw = CHAN_WIDTH_40;
+			return radar_vs_channel_map[last_cons_chan_idx - 1][0];
+		}
+		else {
+			*new_bw = CHAN_WIDTH_20;
+			*secondary_offset = 0;
+			return radar_vs_channel_map[last_cons_chan_idx - 1][0];
+		}
+	case 3:
+		*new_bw = CHAN_WIDTH_40;
+		if (last_cons_chan_idx % 2)
+			return radar_vs_channel_map[last_cons_chan_idx - 1][0];
+		else
+			return radar_vs_channel_map[last_cons_chan_idx - 2][0];
+	case 4:
+	case 5:
+	case 6:
+	case 7:
+		if (7 == last_cons_chan_idx) {
+			*new_bw = CHAN_WIDTH_80;
+			return radar_vs_channel_map[4][0];
+		}
+		else if ((cons_no_radar - 1) == last_cons_chan_idx) {
+			*new_bw = CHAN_WIDTH_80;
+			return radar_vs_channel_map[0][0];
+		}
+		else if (last_cons_chan_idx % 2) {
+			*new_bw = CHAN_WIDTH_40;
+			return radar_vs_channel_map[last_cons_chan_idx - 1][0];
+		}
+		else {
+			*new_bw = CHAN_WIDTH_40;
+			return radar_vs_channel_map[last_cons_chan_idx - 2][0];
+		}
+	case 8:
+		wpa_printf(MSG_WARNING, "SB DFS: Radar detected on non DFS channel?");
+		return -1;
+	default:
+		return 0;
+	}
+
+	return 0;
+}
+
+int hostapd_bandwidth_to_nl_sb_dfs_bw (int bandwidth)
+{
+	switch (bandwidth) {
+	case CHAN_WIDTH_20_NOHT:
+	case CHAN_WIDTH_20:
+		return NL80211_SB_DFS_BW_20;
+	case CHAN_WIDTH_40:
+		return NL80211_SB_DFS_BW_40;
+	case CHAN_WIDTH_80:
+		return NL80211_SB_DFS_BW_80;
+	default:
+		return -1;
+	}
+}
+
+static int
+hostapd_sb_dfs_is_on_adjacent (struct hostapd_iface *iface, u8 channel)
+{
+	int i;
+	int n_chans, n_chans1;
+	int start_chan_idx, start_chan_idx1;
+	struct hostapd_channel_data *chan;
+	struct hostapd_hw_modes *mode;
+
+	mode = iface->current_mode;
+	if (!mode)
+		return 0;
+
+	start_chan_idx = dfs_get_start_chan_idx(iface, &start_chan_idx1);
+	n_chans = dfs_get_used_n_chans(iface, &n_chans1);
+
+	for (i = 0; i < n_chans; i++) {
+		chan = &mode->channels[start_chan_idx + i];
+
+		/* On operationl BW */
+		if (chan->chan == channel)
+			return 0;
+	}
+
+	return 1;
+}
+
+/* Counter is incremented on first radar detection, to track afterwards if
+ * sub band DFS is active, or when radar detected on adjacent sub band */
+static void
+hostapd_sb_dfs_inc_cntr (struct hostapd_iface *iface, u8 rbm)
+{
+	int i, start_chan_idx, n_chans;
+	struct hostapd_channel_data *chan;
+	struct hostapd_hw_modes *mode;
+
+	mode = iface->current_mode;
+	if (!mode)
+		return;
+
+	if (!iface->sb_dfs_cntr) {
+		iface->sb_dfs_cntr++;
+		return;
+	}
+
+	start_chan_idx = hostapd_get_low_chan_idx(iface, iface->sb_orig_chandef.vht_oper_centr_freq_seg0_idx,
+						  iface->sb_orig_chandef.vht_oper_chwidth,
+						  iface->sb_orig_chandef.channel,
+						  iface->sb_orig_chandef.secondary_offset);
+	n_chans = hostapd_get_num_chans(iface, iface->sb_orig_chandef.vht_oper_chwidth, iface->sb_orig_chandef.secondary_offset);
+
+	if (-1 == start_chan_idx) {
+		wpa_printf(MSG_ERROR, "SB DFS: Cannot get start channel index");
+		return;
+	}
+
+	for (i = 0; i < n_chans; i++) {
+		chan = &mode->channels[start_chan_idx + i];
+
+		if (!(chan->flag & HOSTAPD_CHAN_RADAR))
+			continue;
+
+		if (!(rbm & 1 << i))
+			continue;
+
+		if (hostapd_sb_dfs_is_on_adjacent(iface, chan->chan)) {
+			iface->sb_dfs_cntr++;
+			return;
+		}
+
+	}
+}
+
+static int
+hostapd_sub_dfs_switch_chan (struct hostapd_iface *iface, u8 rbm, int chan,
+			     int bandwidth, int secondary_offset)
+{
+	int i, err;
+	u8 vht_oper_chwidth;
+	u8 orig_vht_oper_chwidth;
+	u8 vht_oper_centr_freq_seg0_idx = 0;
+	u8 vht_oper_centr_freq_seg1_idx = 0; /* 80+80 is not supported by DFS */
+	int secondary_channel = secondary_offset;
+	struct csa_settings csa_settings;
+	struct hostapd_channel_data *channel = NULL;
+	int switch_to_full = !chan && !bandwidth && !secondary_offset;
+
+	os_memset(&csa_settings, 0, sizeof(csa_settings));
+	csa_settings.cs_count = 5;
+	csa_settings.block_tx = 1;
+
+	if (switch_to_full)
+		chan = iface->sb_orig_chandef.channel;
+
+	channel = hostapd_get_mode_channel(iface, (acs_chan_to_freq(chan)));
+	if (!channel) {
+		wpa_printf(MSG_ERROR, "SB DFS: Channel %d not supported by HW", chan);
+		return 1;
+	}
+
+	if (switch_to_full) {
+		csa_settings.sb_dfs_bw = NL80211_SB_DFS_BW_FULL;
+		secondary_channel = iface->sb_orig_chandef.secondary_offset;
+		vht_oper_chwidth = iface->sb_orig_chandef.vht_oper_chwidth;
+		vht_oper_centr_freq_seg0_idx = iface->sb_orig_chandef.vht_oper_centr_freq_seg0_idx;
+	}
+	else {
+		csa_settings.sb_dfs_bw = hostapd_bandwidth_to_nl_sb_dfs_bw(bandwidth);
+
+		if (csa_settings.sb_dfs_bw == -1) {
+			wpa_printf(MSG_ERROR, "SB DFS: Could not set new operational sub band bandwidth");
+			return 1;
+		}
+
+		orig_vht_oper_chwidth = iface->conf->vht_oper_chwidth;
+
+		if (NL80211_SB_DFS_BW_80 == csa_settings.sb_dfs_bw)
+			iface->conf->vht_oper_chwidth = vht_oper_chwidth = VHT_CHANWIDTH_80MHZ;
+		else
+			iface->conf->vht_oper_chwidth = vht_oper_chwidth = VHT_CHANWIDTH_USE_HT;
+
+		dfs_adjust_vht_center_freq(iface, channel, secondary_channel,
+					   &vht_oper_centr_freq_seg0_idx,
+					   &vht_oper_centr_freq_seg1_idx);
+
+		iface->conf->vht_oper_chwidth = orig_vht_oper_chwidth;
+
+		if (iface->sb_dfs_cntr == 0) {
+			iface->sb_orig_chandef.channel = iface->conf->channel;
+			iface->sb_orig_chandef.secondary_offset = iface->conf->secondary_channel;
+			iface->sb_orig_chandef.vht_oper_chwidth = iface->conf->vht_oper_chwidth;
+			iface->sb_orig_chandef.vht_oper_centr_freq_seg0_idx = iface->conf->vht_oper_centr_freq_seg0_idx;
+		}
+	}
+
+	err = hostapd_set_freq_params(&csa_settings.freq_params,
+				      iface->conf->hw_mode,
+				      channel->freq,
+				      channel->chan,
+				      iface->conf->ieee80211n,
+				      iface->conf->ieee80211ac,
+				      secondary_channel,
+				      vht_oper_chwidth,
+				      vht_oper_centr_freq_seg0_idx,
+				      vht_oper_centr_freq_seg1_idx,
+				      iface->current_mode->vht_capab);
+
+	iface->chan_switch_reason = HAPD_CHAN_SWITCH_RADAR_DETECTED;
+	for (i = 0; i < iface->num_bss; i++) {
+		err = hostapd_switch_channel(iface->bss[i], &csa_settings);
+		if (err)
+			break;
+	}
+
+	if (err){
+		wpa_printf(MSG_WARNING, "SB DFS: Failed to schedule CSA (%d)", err);
+		return 1;
+	}
+	else {
+		if (rbm)
+			hostapd_sb_dfs_inc_cntr(iface, rbm);
+		iface->freq = channel->freq;
+		iface->conf->channel = channel->chan;
+		iface->conf->secondary_channel = secondary_channel;
+	}
+	return 0;
+}
+
+static int
+hostapd_add_dfs_history_entry(struct hostapd_iface *iface,
+			      int cf1, int cf2, int chan_width, u8 rbm, u8 type)
+{
+	struct os_time time;
+	u8 seg0_idx = 0, seg1_idx = 0;
+	hostapd_dfs_history_t *entry, *first_entry;
+
+	/* If maximum number of entries reached, delete the oldest one */
+	if (iface->dfs_hist_entry_cnt >= MAX_DFS_HIST_ENTRIES) {
+		first_entry = dl_list_first(&iface->dfs_history, hostapd_dfs_history_t, list);
+
+		if (first_entry) {
+			dl_list_del(&first_entry->list);
+			iface->dfs_hist_entry_cnt--;
+			os_free(first_entry);
+		}
+	}
+
+	entry = os_zalloc(sizeof(*entry));
+
+	if (!entry)
+		return 1;
+
+	ieee80211_freq_to_chan(cf1, &seg0_idx);
+	ieee80211_freq_to_chan(cf2, &seg1_idx);
+	entry->seg0_idx = seg0_idx;
+	entry->seg1_idx = seg0_idx;
+	entry->bandwidth = chan_width_enum_to_freq(chan_width);
+	entry->rbm = rbm;
+	entry->primary = iface->conf->channel;
+	entry->type = type;
+	os_get_time(&time);
+	entry->detect_time = time.sec;
+
+	DL_LIST_ADD_TAIL(&iface->dfs_history, entry, list);
+	iface->dfs_hist_entry_cnt++;
+
+	return 0;
+}
+
 int hostapd_dfs_radar_detected(struct hostapd_iface *iface, int freq,
 			       int ht_enabled, int chan_offset, int chan_width,
-			       int cf1, int cf2)
+			       int cf1, int cf2, u8 rbm)
 {
 	int res;
+	int sb_dfs_new_prim = 0;
+	int sb_dfs_new_bw = CHAN_WIDTH_20;
+	int secondary_offset = 0;
 
 	wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO, DFS_EVENT_RADAR_DETECTED
 		"freq=%d ht_enabled=%d chan_offset=%d chan_width=%d cf1=%d cf2=%d",
@@ -1225,7 +1682,7 @@ int hostapd_dfs_radar_detected(struct hostapd_iface *iface, int freq,
 
 	/* mark radar frequency as invalid */
 	set_dfs_state(iface, freq, ht_enabled, chan_offset, chan_width,
-		      cf1, cf2, HOSTAPD_CHAN_DFS_UNAVAILABLE);
+		      cf1, cf2, rbm, HOSTAPD_CHAN_DFS_UNAVAILABLE);
 
 #ifdef CONFIG_ACS
   if (iface->conf->acs_init_done)
@@ -1237,6 +1694,38 @@ int hostapd_dfs_radar_detected(struct hostapd_iface *iface, int freq,
 	if (!res)
 		return 0;
 
+	wpa_printf(MSG_DEBUG, "SB DFS: Radar Bit Map 0x%02x", rbm);
+
+	if (iface->conf->sub_band_dfs && !iface->conf->dfs_debug_chan) {
+		sb_dfs_new_prim = hostapd_sub_dfs_get_new_chan(iface, &sb_dfs_new_bw, &secondary_offset);
+
+		if (sb_dfs_new_prim == -1) { /* Stay on the same channel */
+			hostapd_add_dfs_history_entry(iface, cf1, cf2, chan_width, rbm, DFS_NO_SWITCH);
+			return 0;
+		}
+		else if (sb_dfs_new_prim > 0) {
+			wpa_printf(MSG_INFO, "SB DFS: New chan %d, bw %s, Secondary %d",
+				   sb_dfs_new_prim, channel_width_to_string(sb_dfs_new_bw), secondary_offset);
+			hostapd_add_dfs_history_entry(iface, cf1, cf2, chan_width, rbm, DFS_SUB_BAND_SWICH);
+
+			if (hostapd_sub_dfs_switch_chan(iface, rbm, sb_dfs_new_prim, sb_dfs_new_bw, secondary_offset))
+				wpa_printf(MSG_ERROR, "SB DFS: Failed to switch to sub band, will try to switch to new channel");
+			else
+				return 0;
+		}
+		else { /* Will switch to new channel */
+			wpa_printf(MSG_INFO, "SB DFS: No sub band switch possible, will switch to new channel");
+			/* Restore original channel params */
+			if (iface->sb_dfs_cntr) {
+				iface->conf->vht_oper_chwidth = iface->sb_orig_chandef.vht_oper_chwidth;
+				iface->conf->secondary_channel = iface->sb_orig_chandef.secondary_offset;
+				iface->conf->channel = iface->sb_orig_chandef.channel;
+				iface->conf->vht_oper_centr_freq_seg0_idx = iface->sb_orig_chandef.vht_oper_centr_freq_seg0_idx;
+			}
+		}
+	}
+
+	hostapd_add_dfs_history_entry(iface, cf1, cf2, chan_width, rbm, DFS_CHAN_SWITCH);
 #ifdef CONFIG_ACS
   if (iface->failsafe.freq == 0 && iface->conf->acs_init_done)
     acs_radar_switch(iface);
@@ -1248,6 +1737,54 @@ int hostapd_dfs_radar_detected(struct hostapd_iface *iface, int freq,
 	return res;
 }
 
+static int
+hostapd_sb_dfs_prepare_for_full_bw (struct hostapd_iface *iface)
+{
+	int i;
+	int n_chans;
+	struct hostapd_hw_modes *mode;
+	struct hostapd_channel_data *chan;
+	int start_chan_idx = -1;
+
+	mode = iface->current_mode;
+	if (!mode)
+		return 0;
+
+	n_chans = hostapd_get_num_chans(iface, iface->sb_orig_chandef.vht_oper_chwidth, iface->sb_orig_chandef.secondary_offset);
+	start_chan_idx = hostapd_get_low_chan_idx(iface, iface->sb_orig_chandef.vht_oper_centr_freq_seg0_idx,
+						  iface->sb_orig_chandef.vht_oper_chwidth,
+						  iface->sb_orig_chandef.channel,
+						  iface->sb_orig_chandef.secondary_offset);
+
+	if (-1 == start_chan_idx) {
+		wpa_printf(MSG_INFO, "SB DFS: Could not get channel idx for channel %d",
+			   iface->sb_orig_chandef.channel);
+		return 0;
+	}
+
+	for (i = 0; i < n_chans; i++) {
+		chan = &mode->channels[start_chan_idx + i];
+
+		if (!(chan->flag & HOSTAPD_CHAN_RADAR))
+			continue;
+
+		if ((chan->flag & HOSTAPD_CHAN_DFS_MASK) == HOSTAPD_CHAN_DFS_UNAVAILABLE)
+			return 0;
+	}
+
+	/* If none are unavailable, set usable to available and switch back to original BW */
+	for (i = 0; i < n_chans; i++) {
+		chan = &mode->channels[start_chan_idx + i];
+
+		if (!(chan->flag & HOSTAPD_CHAN_RADAR))
+			continue;
+
+		if ((chan->flag & HOSTAPD_CHAN_DFS_MASK) == HOSTAPD_CHAN_DFS_USABLE)
+			set_dfs_state_freq(iface, chan->freq, HOSTAPD_CHAN_DFS_AVAILABLE);
+	}
+
+	return 1;
+}
 
 int hostapd_dfs_nop_finished(struct hostapd_iface *iface, int freq,
 			     int ht_enabled, int chan_offset, int chan_width,
@@ -1263,13 +1800,19 @@ int hostapd_dfs_nop_finished(struct hostapd_iface *iface, int freq,
 
 	/* TODO add correct implementation here */
 	set_dfs_state(iface, freq, ht_enabled, chan_offset, chan_width,
-		      cf1, cf2, HOSTAPD_CHAN_DFS_USABLE);
+		      cf1, cf2, 0, HOSTAPD_CHAN_DFS_USABLE);
 
 #ifdef CONFIG_ACS
   if (iface->conf->acs_init_done)
     acs_update_radar(iface);
 #endif
 
+	if (iface->sb_dfs_cntr) { /* If we are on sub band */
+		if (hostapd_sb_dfs_prepare_for_full_bw(iface)) {
+			hostapd_sub_dfs_switch_chan(iface, 0, 0, 0, 0);
+		}
+	}
+
 	/* Handle cases where all channels were initially unavailable */
 	if (iface->state == HAPD_IFACE_DFS && !iface->cac_started) {
 		Boolean dfs_dbg_set_beacon = FALSE;
diff --git a/src/ap/dfs.h b/src/ap/dfs.h
index f3f52f2..c4af59a 100644
--- a/src/ap/dfs.h
+++ b/src/ap/dfs.h
@@ -18,7 +18,7 @@ int hostapd_dfs_complete_cac(struct hostapd_iface *iface, int success, int freq,
 int hostapd_dfs_radar_detected(struct hostapd_iface *iface, int freq,
 			       int ht_enabled,
 			       int chan_offset, int chan_width,
-			       int cf1, int cf2);
+			       int cf1, int cf2, u8 rbm);
 int hostapd_dfs_nop_finished(struct hostapd_iface *iface, int freq,
 			     int ht_enabled,
 			     int chan_offset, int chan_width, int cf1, int cf2);
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index e1eab58..a355da0 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1569,7 +1569,7 @@ static void hostapd_event_dfs_radar_detected(struct hostapd_data *hapd,
 	wpa_printf(MSG_DEBUG, "DFS radar detected on %d MHz", radar->freq);
 	hostapd_dfs_radar_detected(hapd->iface, radar->freq, radar->ht_enabled,
 				   radar->chan_offset, radar->chan_width,
-				   radar->cf1, radar->cf2);
+				   radar->cf1, radar->cf2, radar->rbm);
 }
 
 
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index af1bbc1..0343ffc 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -47,6 +47,7 @@
 #include "ndisc_snoop.h"
 #include "neighbor_db.h"
 #include "rrm.h"
+#include "drivers/nl80211_copy.h"
 #ifdef CONFIG_WDS_WPA
 #include "wds_wpa.h"
 #endif
@@ -433,6 +434,20 @@ static void sta_track_deinit(struct hostapd_iface *iface)
 	}
 }
 
+static void dfs_history_deinit (struct hostapd_iface *iface)
+{
+	hostapd_dfs_history_t *entry;
+
+	if (!iface->dfs_hist_entry_cnt)
+		return;
+
+	while ((entry = dl_list_first(&iface->dfs_history, hostapd_dfs_history_t, list))) {
+		dl_list_del(&entry->list);
+		iface->dfs_hist_entry_cnt--;
+		os_free(entry);
+	}
+}
+
 
 static void hostapd_cleanup_iface_partial(struct hostapd_iface *iface)
 {
@@ -450,6 +465,7 @@ static void hostapd_cleanup_iface_partial(struct hostapd_iface *iface)
 	iface->basic_rates = NULL;
 	ap_list_deinit(iface);
 	sta_track_deinit(iface);
+	dfs_history_deinit(iface);
 	iface->set_freq_done = 0;
 }
 
@@ -1761,6 +1777,8 @@ static int hostapd_setup_interface_complete_sync(struct hostapd_iface *iface,
 	if (err)
 		goto fail;
 
+	iface->sb_dfs_cntr = 0;
+
 	wpa_printf(MSG_DEBUG, "Completing interface initialization");
 	if (iface->conf->channel) {
 		int res;
@@ -2247,6 +2265,7 @@ struct hostapd_iface * hostapd_alloc_iface(void)
 		return NULL;
 
 	dl_list_init(&hapd_iface->sta_seen);
+	dl_list_init(&hapd_iface->dfs_history);
 
 	return hapd_iface;
 }
@@ -3370,6 +3389,10 @@ int hostapd_switch_channel(struct hostapd_data *hapd,
 		return ret;
 	}
 
+	if (NL80211_SB_DFS_BW_NORMAL == settings->sb_dfs_bw ||
+	    NL80211_SB_DFS_BW_FULL == settings->sb_dfs_bw)
+		hapd->iface->sb_dfs_cntr = 0;
+
 	hapd->csa_in_progress = 1;
 	return 0;
 }
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index e23904f..69d9e7f 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -327,6 +327,29 @@ struct hostapd_sta_info {
 #endif /* CONFIG_TAXONOMY */
 };
 
+typedef struct hostapd_sb_dfs_orig_chandef {
+	u8  channel;
+	int secondary_offset;
+	u8  vht_oper_chwidth;
+	u8  vht_oper_centr_freq_seg0_idx;
+}hostapd_sb_dfs_orig_chandef_t;
+
+typedef struct hostapd_dfs_history {
+	struct dl_list list;
+	os_time_t detect_time;
+	int bandwidth;
+	u8 primary;
+	u8 seg0_idx;
+	u8 seg1_idx;
+	u8 rbm; /* Radar Bit Map */
+	u8 type;
+}hostapd_dfs_history_t;
+
+#define MAX_DFS_HIST_ENTRIES 50
+#define DFS_CHAN_SWITCH      0
+#define DFS_SUB_BAND_SWICH   1
+#define DFS_NO_SWITCH        2
+
 /**
  * struct hostapd_iface - hostapd per-interface data structure
  */
@@ -492,6 +515,10 @@ struct hostapd_iface {
 	int block_tx; /* Is TX block on or off */
 
 	int set_freq_done;
+	int sb_dfs_cntr;
+	int dfs_hist_entry_cnt;
+	hostapd_sb_dfs_orig_chandef_t sb_orig_chandef;
+	struct dl_list dfs_history; /* struct hostapd_dfs_history */
 };
 
 /* hostapd.c */
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index d19813f..a2a5bcf 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2053,6 +2053,7 @@ struct beacon_data {
 struct csa_settings {
 	u8 cs_count;
 	u8 block_tx;
+	u8 sb_dfs_bw; /* From enum nl80211_sb_dfs_bw */
 
 	struct hostapd_freq_params freq_params;
 	struct beacon_data beacon_csa;
@@ -5378,6 +5379,7 @@ union wpa_event_data {
 		enum chan_width chan_width;
 		int cf1;
 		int cf2;
+		u8 rbm; /* Radar Bit Map */
 	} dfs_event;
 
 	/**
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 1b671da..00f4f09 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -8406,6 +8406,11 @@ static int nl80211_switch_channel(void *priv, struct csa_settings *settings)
 	     nla_put_flag(msg, NL80211_ATTR_CH_SWITCH_BLOCK_TX)))
 		goto error;
 
+	if (settings->sb_dfs_bw) {
+		if (nla_put_u8(msg, NL80211_ATTR_SB_DFS_BW, settings->sb_dfs_bw))
+			goto error;
+	}
+
 	/* beacon_after params */
 	ret = set_beacon_data(msg, &settings->beacon_after);
 	if (ret)
@@ -8435,6 +8440,10 @@ static int nl80211_switch_channel(void *priv, struct csa_settings *settings)
 		wpa_printf(MSG_DEBUG, "nl80211: switch_channel failed err=%d (%s)",
 			   ret, strerror(-ret));
 	}
+
+	/* Update bandwidth here to avoid calling nl80211_set_channel() in set_ap()*/
+	bss->bandwidth = settings->freq_params.bandwidth;
+
 	return ret;
 
 fail:
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index 9f0976c..6d530a4 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -1474,6 +1474,9 @@ static void nl80211_radar_event(struct wpa_driver_nl80211_data *drv,
 	if (tb[NL80211_ATTR_CENTER_FREQ2])
 		data.dfs_event.cf2 = nla_get_u32(tb[NL80211_ATTR_CENTER_FREQ2]);
 
+	if (tb[NL80211_ATTR_RADAR_BIT_MAP])
+		data.dfs_event.rbm = nla_get_u8(tb[NL80211_ATTR_RADAR_BIT_MAP]);
+
 	wpa_printf(MSG_DEBUG, "nl80211: DFS event on freq %d MHz, ht: %d, offset: %d, width: %d, cf1: %dMHz, cf2: %dMHz",
 		   data.dfs_event.freq, data.dfs_event.ht_enabled,
 		   data.dfs_event.chan_offset, data.dfs_event.chan_width,
diff --git a/wpa_supplicant/ap.c b/wpa_supplicant/ap.c
index 5afb772..312db77 100644
--- a/wpa_supplicant/ap.c
+++ b/wpa_supplicant/ap.c
@@ -1449,7 +1449,7 @@ void wpas_event_dfs_radar_detected(struct wpa_supplicant *wpa_s,
 	hostapd_dfs_radar_detected(wpa_s->ap_iface, radar->freq,
 				   radar->ht_enabled, radar->chan_offset,
 				   radar->chan_width,
-				   radar->cf1, radar->cf2);
+				   radar->cf1, radar->cf2, rbm);
 }
 
 
-- 
2.10.1

