From c727015d10a80d6d5203314a9229dd1e71f76ec9 Mon Sep 17 00:00:00 2001
From: omerefrx <omerx.efrat@intel.com>
Date: Mon, 2 Apr 2018 19:34:41 +0300
Subject: [PATCH] add DWDS feature to wpa_supplicant

---
 hostapd/config_file.c             |  3 ++
 src/ap/ap_config.c                |  1 +
 src/ap/ap_config.h                |  1 +
 src/ap/ieee802_11.c               | 30 +++++++++++++++--
 wpa_supplicant/config.c           | 48 ++++++++++++++++++++++++++-
 wpa_supplicant/config.h           | 15 +++++++--
 wpa_supplicant/ctrl_iface.c       | 61 +---------------------------------
 wpa_supplicant/sme.c              | 14 +-------
 wpa_supplicant/wpa_supplicant.c   | 69 +++++++++++++++++++++++++++++++++++++++
 wpa_supplicant/wpa_supplicant_i.h |  3 +-
 10 files changed, 164 insertions(+), 81 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index f19a87b..e2b357a 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3837,6 +3837,9 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 	} else if (os_strcmp(buf, "vendor_elements") == 0) {
 		if (parse_wpabuf_hex(line, buf, &bss->vendor_elements, pos))
 			return 1;
+	} else if (os_strcmp(buf, "authresp_elements") == 0) {
+		if (parse_wpabuf_hex(line, buf, &bss->authresp_elements, pos))
+			return 1;
 	} else if (os_strcmp(buf, "assocresp_elements") == 0) {
 		if (parse_wpabuf_hex(line, buf, &bss->assocresp_elements, pos))
 			return 1;
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 22f161b..45082e8 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -696,6 +696,7 @@ void hostapd_config_free_bss(struct hostapd_bss_config *conf)
 #endif /* CONFIG_HS20 */
 
 	wpabuf_free(conf->vendor_elements);
+	wpabuf_free(conf->authresp_elements);
 	wpabuf_free(conf->assocresp_elements);
 
 	os_free(conf->sae_groups);
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index af434ba..d39f909 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -568,6 +568,7 @@ struct hostapd_bss_config {
 #endif /* CONFIG_RADIUS_TEST */
 
 	struct wpabuf *vendor_elements;
+	struct wpabuf *authresp_elements;
 	struct wpabuf *assocresp_elements;
 
 	unsigned int sae_anti_clogging_threshold;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 488ff9f..884ca42 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -1001,8 +1001,9 @@ static void handle_auth(struct hostapd_data *hapd,
 	u32 session_timeout, acct_interim_interval;
 	struct vlan_description vlan_id;
 	struct hostapd_sta_wpa_psk_short *psk = NULL;
-	u8 resp_ies[2 + WLAN_AUTH_CHALLENGE_LEN];
+	u8 *resp_ies;
 	size_t resp_ies_len = 0;
+	size_t vendor_ie_len = 0;
 	char *identity = NULL;
 	char *radius_cui = NULL;
 	u16 seq_ctrl;
@@ -1031,6 +1032,15 @@ static void handle_auth(struct hostapd_data *hapd,
 		return;
 	}
 
+	if (hapd->conf->authresp_elements)
+		vendor_ie_len = wpabuf_len(hapd->conf->authresp_elements);
+
+	resp_ies = os_malloc(2 + WLAN_AUTH_CHALLENGE_LEN + vendor_ie_len);
+	if (NULL == resp_ies) {
+		wpa_printf(MSG_ERROR, "handle_auth - failed to allocate auth reply IEs");
+		return;
+	}
+
 	auth_alg = le_to_host16(mgmt->u.auth.auth_alg);
 	auth_transaction = le_to_host16(mgmt->u.auth.auth_transaction);
 	status_code = le_to_host16(mgmt->u.auth.status_code);
@@ -1115,7 +1125,7 @@ static void handle_auth(struct hostapd_data *hapd,
 				   hapd->conf->no_auth_if_seen_on);
 
 			resp = WLAN_STATUS_REJECTED_WITH_SUGGESTED_BSS_TRANSITION;
-			pos = &resp_ies[0];
+			pos = resp_ies;
 			*pos++ = WLAN_EID_NEIGHBOR_REPORT;
 			*pos++ = 13;
 			os_memcpy(pos, other->own_addr, ETH_ALEN);
@@ -1149,7 +1159,7 @@ static void handle_auth(struct hostapd_data *hapd,
 			*pos++ = op_class;
 			*pos++ = channel;
 			*pos++ = phytype;
-			resp_ies_len = pos - &resp_ies[0];
+			resp_ies_len = pos - resp_ies;
 			goto fail;
 		}
 	}
@@ -1174,6 +1184,7 @@ static void handle_auth(struct hostapd_data *hapd,
 		 * external source. */
 		os_free(identity);
 		os_free(radius_cui);
+		os_free(resp_ies);
 		return;
 	}
 
@@ -1190,6 +1201,7 @@ static void handle_auth(struct hostapd_data *hapd,
 				       seq_ctrl);
 			os_free(identity);
 			os_free(radius_cui);
+			os_free(resp_ies);
 			return;
 		}
 #ifdef CONFIG_MESH
@@ -1200,6 +1212,7 @@ static void handle_auth(struct hostapd_data *hapd,
 				   MAC2STR(mgmt->sa));
 			os_free(identity);
 			os_free(radius_cui);
+			os_free(resp_ies);
 			return;
 		}
 #endif /* CONFIG_MESH */
@@ -1221,6 +1234,7 @@ static void handle_auth(struct hostapd_data *hapd,
 
 			os_free(identity);
 			os_free(radius_cui);
+			os_free(resp_ies);
 			return;
 		}
 #endif /* CONFIG_MESH */
@@ -1359,6 +1373,7 @@ static void handle_auth(struct hostapd_data *hapd,
 				    sizeof(mgmt->u.auth),
 				    handle_auth_ft_finish, hapd);
 		/* handle_auth_ft_finish() callback will complete auth. */
+		os_free(resp_ies);
 		return;
 #endif /* CONFIG_IEEE80211R */
 #ifdef CONFIG_SAE
@@ -1380,10 +1395,17 @@ static void handle_auth(struct hostapd_data *hapd,
 #endif /* CONFIG_MESH */
 		handle_auth_sae(hapd, sta, mgmt, len, auth_transaction,
 				status_code);
+		os_free(resp_ies);
 		return;
 #endif /* CONFIG_SAE */
 	}
 
+	if (hapd->conf->authresp_elements) {
+		u8 *pos = resp_ies + resp_ies_len;
+		os_memcpy(pos, wpabuf_head(hapd->conf->authresp_elements), vendor_ie_len);
+		resp_ies_len += vendor_ie_len;
+	}
+
  fail:
 	os_free(identity);
 	os_free(radius_cui);
@@ -1393,6 +1415,8 @@ static void handle_auth(struct hostapd_data *hapd,
 				    auth_transaction + 1, resp, resp_ies,
 				    resp_ies_len);
 
+	os_free(resp_ies);
+
 	if (sta && sta->added_unassoc && (resp != WLAN_STATUS_SUCCESS ||
 					  reply_res != WLAN_STATUS_SUCCESS)) {
 		hostapd_drv_sta_remove(hapd, sta->addr);
diff --git a/wpa_supplicant/config.c b/wpa_supplicant/config.c
index c1b3d71..a484ee9 100644
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -17,6 +17,7 @@
 #include "p2p/p2p.h"
 #include "fst/fst.h"
 #include "config.h"
+#include "wpa_supplicant_i.h"
 
 
 #if !defined(CONFIG_CTRL_IFACE) && defined(CONFIG_NO_CONFIG_WRITE)
@@ -2365,7 +2366,8 @@ void wpa_config_free(struct wpa_config *config)
 #ifdef CONFIG_MBO
 	os_free(config->non_pref_chan);
 #endif /* CONFIG_MBO */
-
+	for (i = 0; i < NUM_VENDOR_ELEM_FRAMES; i++)
+		wpabuf_free(config->vendor_elems[i]);
 	os_free(config);
 }
 
@@ -4141,6 +4143,49 @@ static int wpa_config_process_ap_vendor_elements(
 	return 0;
 }
 
+static int wpa_config_add_vendor_elem(
+	struct wpa_config *config,
+	const char *buf, size_t length)
+{
+	int res;
+	char *cmd = os_malloc(length + 1);
+
+	if (NULL == cmd)
+		return -1;
+
+	os_memcpy(cmd, buf, length);
+	cmd[length] = '\0';
+	res = wpas_vendor_elem_add(NULL, config->vendor_elems, cmd);
+	os_free(cmd);
+	return res;
+}
+
+static int wpa_config_process_vendor_elems(
+	const struct global_parse_data *data,
+	struct wpa_config *config, int line, const char *buf)
+{
+	const char *pos, *start, *end;
+	int cnt = 0;
+
+	pos = start = buf;
+	end = os_strchr(pos, '\0');
+	if (NULL == end)
+		return -1;
+
+	while (NULL != (pos = os_strchr(pos, ' '))) {
+		cnt++;
+
+		if (0 == (cnt % 2)) {
+			if (wpa_config_add_vendor_elem(config, start, pos - start))
+				return -1;
+			start = pos + 1;
+		}
+		pos++;
+	}
+
+	return wpa_config_add_vendor_elem(config, start, end - start);
+}
+
 #ifdef CONFIG_CTRL_IFACE
 static int wpa_config_process_no_ctrl_interface(
 	const struct global_parse_data *data,
@@ -4371,6 +4416,7 @@ static const struct global_parse_data global_fields[] = {
 	{ INT_RANGE(ftm_responder, 0, 1), 0 },
 	{ INT_RANGE(ftm_initiator, 0, 1), 0 },
 	{ INT_RANGE(wds, 0, 1), 0 },
+	{ FUNC(vendor_elems), 0 },
 };
 
 #undef FUNC
diff --git a/wpa_supplicant/config.h b/wpa_supplicant/config.h
index bb5b53e..8835dd7 100644
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -46,6 +46,7 @@
 #include "wps/wps.h"
 #include "common/ieee802_11_defs.h"
 #include "common/ieee802_11_common.h"
+#include "common/wpa_ctrl.h"
 
 
 struct wpa_cred {
@@ -1330,14 +1331,22 @@ struct wpa_config {
 	int ftm_initiator;
 
 	/**
-	 * wds - Publish wds vendor specific element.
+	 * wds - If set, station will connect to peer ap in 4 address mode
 	 *
 	 * Values:
-	 * 0 - do not publish wds vendor specific functionality (Default)
-	 * 1 - publish wds vendor specific functionality in
+	 * 0 - connect to peer AP in 3 address mode (default)
+	 * 1 - connect to peer AP in 4 address mode
 	 *	association request
 	 */
 	int wds;
+
+	/**
+	 * vendor_elems - publish Vendor Specific IEs for specified management frames
+	 *
+	 * format: <mfid> <vsie_hex> [mfid] [vsie_hex] ...
+	 * mfid values: enum wpa_vendor_elem_frame
+	 */
+	struct wpabuf *vendor_elems[NUM_VENDOR_ELEM_FRAMES];
 };
 
 
diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index a6e488e..10bf23b 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -8553,65 +8553,6 @@ static int wpas_ctrl_test_assoc_ie(struct wpa_supplicant *wpa_s,
 #endif /* CONFIG_TESTING_OPTIONS */
 
 
-static int wpas_ctrl_vendor_elem_add(struct wpa_supplicant *wpa_s, char *cmd)
-{
-	char *pos = cmd;
-	int frame;
-	size_t len;
-	struct wpabuf *buf;
-	struct ieee802_11_elems elems;
-
-	frame = atoi(pos);
-	if (frame < 0 || frame >= NUM_VENDOR_ELEM_FRAMES)
-		return -1;
-	wpa_s = wpas_vendor_elem(wpa_s, frame);
-
-	pos = os_strchr(pos, ' ');
-	if (pos == NULL)
-		return -1;
-	pos++;
-
-	len = os_strlen(pos);
-	if (len == 0)
-		return 0;
-	if (len & 1)
-		return -1;
-	len /= 2;
-
-	buf = wpabuf_alloc(len);
-	if (buf == NULL)
-		return -1;
-
-	if (hexstr2bin(pos, wpabuf_put(buf, len), len) < 0) {
-		wpabuf_free(buf);
-		return -1;
-	}
-
-	if (ieee802_11_parse_elems(wpabuf_head_u8(buf), len, &elems, 0) ==
-	    ParseFailed) {
-		wpabuf_free(buf);
-		return -1;
-	}
-
-	if (wpa_s->vendor_elem[frame] == NULL) {
-		wpa_s->vendor_elem[frame] = buf;
-		wpas_vendor_elem_update(wpa_s);
-		return 0;
-	}
-
-	if (wpabuf_resize(&wpa_s->vendor_elem[frame], len) < 0) {
-		wpabuf_free(buf);
-		return -1;
-	}
-
-	wpabuf_put_buf(wpa_s->vendor_elem[frame], buf);
-	wpabuf_free(buf);
-	wpas_vendor_elem_update(wpa_s);
-
-	return 0;
-}
-
-
 static int wpas_ctrl_vendor_elem_get(struct wpa_supplicant *wpa_s, char *cmd,
 				     char *buf, size_t buflen)
 {
@@ -9666,7 +9607,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 			reply_len = -1;
 #endif /* CONFIG_TESTING_OPTIONS */
 	} else if (os_strncmp(buf, "VENDOR_ELEM_ADD ", 16) == 0) {
-		if (wpas_ctrl_vendor_elem_add(wpa_s, buf + 16) < 0)
+		if (wpas_vendor_elem_add(wpa_s, wpa_s->vendor_elem, buf + 16) < 0)
 			reply_len = -1;
 	} else if (os_strncmp(buf, "VENDOR_ELEM_GET ", 16) == 0) {
 		reply_len = wpas_ctrl_vendor_elem_get(wpa_s, buf + 16, reply,
diff --git a/wpa_supplicant/sme.c b/wpa_supplicant/sme.c
index bebee90..67167a2 100644
--- a/wpa_supplicant/sme.c
+++ b/wpa_supplicant/sme.c
@@ -549,19 +549,7 @@ static void sme_send_authentication(struct wpa_supplicant *wpa_s,
 	}
 #endif /* CONFIG_SAE */
 
-	if (wpa_s->conf->wds) {
-		u8 *pos = wpa_s->sme.assoc_req_ie +
-				  wpa_s->sme.assoc_req_ie_len;
-		*pos++ = WLAN_EID_VENDOR_SPECIFIC;
-		*pos++ = 0x05; /* len */
-		*pos++ = 0x00; /* INTEL_PROPRIETARY_OUI_OCTET_0 */
-		*pos++ = 0x17; /* INTEL_PROPRIETARY_OUI_OCTET_1 */
-		*pos++ = 0x35; /* INTEL_PROPRIETARY_OUI_OCTET_2 */
-		*pos++ = 0x30; /* WLAN_EID_VENDOR_SPECIFIC_OUI_TYPE_4ADDR_MODE */
-		*pos++ = 0x01; /* WLAN_EID_VENDOR_SPECIFIC_OUI_4ADDR_MODE_STA */
-		wpa_s->sme.assoc_req_ie_len += 7;
-		wpa_s->sme.wds = wpa_s->conf->wds;
-	}
+	wpa_s->sme.wds = wpa_s->conf->wds;
 
 	if (wpa_s->vendor_elem[VENDOR_ELEM_AUTH_REQ]) {
 		struct wpabuf *buf = wpa_s->vendor_elem[VENDOR_ELEM_AUTH_REQ];
diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
index 464e46b..292065c 100644
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -5014,6 +5014,7 @@ static int wpa_supplicant_init_iface(struct wpa_supplicant *wpa_s,
 	wpa_supplicant_set_default_scan_ies(wpa_s);
 
 	wpas_set_vendor_events_filter(wpa_s);
+	wpa_s->vendor_elem = wpa_s->conf->vendor_elems;
 
 	return 0;
 }
@@ -5703,6 +5704,7 @@ void wpa_supplicant_update_config(struct wpa_supplicant *wpa_s)
 #endif /* CONFIG_WPS */
 	wpas_p2p_update_config(wpa_s);
 	wpa_s->conf->changed_parameters = 0;
+	wpa_s->vendor_elem = wpa_s->conf->vendor_elems;
 }
 
 
@@ -6819,6 +6821,9 @@ void wpas_vendor_elem_update(struct wpa_supplicant *wpa_s)
 	unsigned int i;
 	char buf[30];
 
+	if (NULL == wpa_s)
+		return;
+
 	wpa_printf(MSG_DEBUG, "Update vendor elements");
 
 	for (i = 0; i < NUM_VENDOR_ELEM_FRAMES; i++) {
@@ -6841,6 +6846,70 @@ void wpas_vendor_elem_update(struct wpa_supplicant *wpa_s)
 #endif /* CONFIG_P2P */
 }
 
+int wpas_vendor_elem_add(struct wpa_supplicant *wpa_s, struct wpabuf **vendor_elem, char *cmd)
+{
+	char *pos = cmd;
+	int frame;
+	size_t len;
+	struct wpabuf *buf;
+	struct ieee802_11_elems elems;
+
+	frame = atoi(pos);
+	if (frame < 0 || frame >= NUM_VENDOR_ELEM_FRAMES)
+		return -1;
+
+	if (wpa_s) {
+		wpa_s = wpas_vendor_elem(wpa_s, frame);
+		vendor_elem = wpa_s->vendor_elem;
+	}
+	else if (NULL == vendor_elem) {
+		return -1;
+	}
+
+	pos = os_strchr(pos, ' ');
+	if (pos == NULL)
+		return -1;
+	pos++;
+
+	len = os_strlen(pos);
+	if (len == 0)
+		return 0;
+	if (len & 1)
+		return -1;
+	len /= 2;
+
+	buf = wpabuf_alloc(len);
+	if (buf == NULL)
+		return -1;
+
+	if (hexstr2bin(pos, wpabuf_put(buf, len), len) < 0) {
+		wpabuf_free(buf);
+		return -1;
+	}
+
+	if (ieee802_11_parse_elems(wpabuf_head_u8(buf), len, &elems, 0) ==
+	    ParseFailed) {
+		wpabuf_free(buf);
+		return -1;
+	}
+
+	if (vendor_elem[frame] == NULL) {
+		vendor_elem[frame] = buf;
+		wpas_vendor_elem_update(wpa_s);
+		return 0;
+	}
+
+	if (wpabuf_resize(&vendor_elem[frame], len) < 0) {
+		wpabuf_free(buf);
+		return -1;
+	}
+
+	wpabuf_put_buf(vendor_elem[frame], buf);
+	wpabuf_free(buf);
+	wpas_vendor_elem_update(wpa_s);
+
+	return 0;
+}
 
 int wpas_vendor_elem_remove(struct wpa_supplicant *wpa_s, int frame,
 			    const u8 *elem, size_t len)
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index 4542784..7a0e316 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -1030,7 +1030,7 @@ struct wpa_supplicant {
 
 	unsigned int ext_work_id;
 
-	struct wpabuf *vendor_elem[NUM_VENDOR_ELEM_FRAMES];
+	struct wpabuf **vendor_elem; /* Pointer to wpa_config->vendor_elems */
 
 #ifdef CONFIG_TESTING_OPTIONS
 	struct l2_packet_data *l2_test;
@@ -1293,6 +1293,7 @@ void wpas_network_reenabled(void *eloop_ctx, void *timeout_ctx);
 void wpas_vendor_elem_update(struct wpa_supplicant *wpa_s);
 struct wpa_supplicant * wpas_vendor_elem(struct wpa_supplicant *wpa_s,
 					 enum wpa_vendor_elem_frame frame);
+int wpas_vendor_elem_add(struct wpa_supplicant *wpa_s, struct wpabuf **vendor_elems, char *cmd);
 int wpas_vendor_elem_remove(struct wpa_supplicant *wpa_s, int frame,
 			    const u8 *elem, size_t len);
 
-- 
2.10.1

