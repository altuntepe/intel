From b668a0c6727debf8e89902b202c9b92e569afd8d Mon Sep 17 00:00:00 2001
From: vulsmike <mikelis.vuls@intel.com>
Date: Tue, 5 Jun 2018 16:28:47 +0300
Subject: [PATCH] hostapd-omn-in-add-sta

---
 src/ap/ap_drv_ops.c    |  7 ++++++-
 src/ap/ap_drv_ops.h    |  3 ++-
 src/ap/ctrl_iface_ap.c |  9 +++++++++
 src/ap/drv_callbacks.c |  2 +-
 src/ap/ieee802_11.c    | 24 +++++++++++++++++++++---
 src/ap/sta_info.c      |  1 +
 src/ap/sta_info.h      |  1 +
 src/ap/wds_wpa.c       |  2 +-
 8 files changed, 42 insertions(+), 7 deletions(-)

diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index ce3e611..2d483e6 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -365,7 +365,8 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 		    const struct ieee80211_vht_capabilities *vht_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
 		    int set, struct ieee80211_mgmt *last_assoc_req,
-		    size_t last_assoc_req_len, int ssi_signal)
+		    size_t last_assoc_req_len, int ssi_signal,
+		    const u8 *ext_capab)
 {
 	struct hostapd_sta_add_params params;
 	int ret_code;
@@ -393,6 +394,10 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 	params.last_assoc_req = last_assoc_req;
 	params.last_assoc_req_len = last_assoc_req_len;
 	params.ssi_signal = ssi_signal;
+	if (ext_capab) {
+		params.ext_capab = &ext_capab[1];
+		params.ext_capab_len = ext_capab[0];
+	}
 
 	ret_code = hapd->driver->sta_add(hapd->drv_priv, &params);
 	if (ret_code == 0)
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index efc84fa..1297622 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -44,7 +44,8 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 		    const struct ieee80211_vht_capabilities *vht_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
 		    int set, struct ieee80211_mgmt *last_assoc_req,
-		    size_t last_assoc_req_len, int ssi_signal);
+		    size_t last_assoc_req_len, int ssi_signal,
+		    const u8 *ext_capab);
 int hostapd_set_privacy(struct hostapd_data *hapd, int enabled);
 int hostapd_set_generic_elem(struct hostapd_data *hapd, const u8 *elem,
 			     size_t elem_len);
diff --git a/src/ap/ctrl_iface_ap.c b/src/ap/ctrl_iface_ap.c
index c6ed00e..3458dd1 100644
--- a/src/ap/ctrl_iface_ap.c
+++ b/src/ap/ctrl_iface_ap.c
@@ -183,6 +183,15 @@ static int hostapd_ctrl_iface_sta_mib(struct hostapd_data *hapd,
 		len += os_snprintf(buf + len, buflen - len, "\n");
 	}
 
+	if (sta->ext_capability &&
+	    buflen - len > (unsigned) (11 + 2 * sta->ext_capability[0])) {
+		len += os_snprintf(buf + len, buflen - len, "ext_capab=");
+		len += wpa_snprintf_hex(buf + len, buflen - len,
+					sta->ext_capability + 1,
+					sta->ext_capability[0]);
+		len += os_snprintf(buf + len, buflen - len, "\n");
+	}
+
 	return len;
 }
 
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index 9cd8a2b..496ff57 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1397,7 +1397,7 @@ static void hostapd_event_ltq_wds_connect_rx(struct hostapd_data *hapd,
 			    sta->flags & WLAN_STA_VHT ? &vht_cap : NULL,
 			    sta->flags | WLAN_STA_AUTHORIZED, sta->qosinfo, sta->vht_opmode,
 			    sta->p2p_ie ? 1 : 0, sta->added_unassoc, sta->last_assoc_req,
-			    sta->last_assoc_req_len, sta->ssi_signal)) {
+			    sta->last_assoc_req_len, sta->ssi_signal, NULL)) {
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
 			       HOSTAPD_LEVEL_NOTICE,
 			       "Could not add STA to kernel driver");
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 25585e1..4baea6e 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -1401,7 +1401,7 @@ static void handle_auth(struct hostapd_data *hapd,
 				WLAN_STA_AUTHORIZED);
 
 		if (hostapd_sta_add(hapd, sta->addr, 0, 0, NULL, 0, 0,
-				    NULL, NULL, sta->flags, 0, 0, 0, 0, NULL, 0, 0)) {
+				    NULL, NULL, sta->flags, 0, 0, 0, 0, NULL, 0, 0, NULL)) {
 			hostapd_logger(hapd, sta->addr,
 				       HOSTAPD_MODULE_IEEE80211,
 				       HOSTAPD_LEVEL_NOTICE,
@@ -1704,8 +1704,16 @@ static u16 check_ext_capab(struct hostapd_data *hapd, struct sta_info *sta,
 			sta->btm_supported = 1;
 	}
 
-	if (ext_capab_ie_len > 0)
+	if (ext_capab_ie_len > 0) {
 		sta->ecsa_supported = !!(ext_capab_ie[0] & BIT(2));
+		os_free(sta->ext_capability);
+		sta->ext_capability = os_malloc(1 + ext_capab_ie_len);
+		if (sta->ext_capability) {
+			sta->ext_capability[0] = ext_capab_ie_len;
+			os_memcpy(sta->ext_capability + 1, ext_capab_ie,
+				  ext_capab_ie_len);
+		}
+	}
 
 	return WLAN_STATUS_SUCCESS;
 }
@@ -3005,6 +3013,7 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 	struct ieee80211_ht_capabilities ht_cap;
 	struct ieee80211_vht_capabilities vht_cap;
 	int set = 1;
+	u8 *ext_capab = NULL;
 
 	sta = ap_get_sta(hapd, mgmt->da);
 	if (!sta) {
@@ -3110,6 +3119,13 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 		hostapd_get_vht_capab(hapd, sta->vht_capabilities, &vht_cap);
 #endif /* CONFIG_IEEE80211AC */
 
+	if (sta->ext_capability) {
+		ext_capab = os_malloc(1 + sta->ext_capability[0]);
+		if (ext_capab) {
+			os_memcpy(ext_capab, sta->ext_capability, 1 + sta->ext_capability[0]);
+		}
+	}
+
 	if (hostapd_sta_add(hapd, sta->addr, sta->aid, sta->capability,
 			sta->supported_rates, sta->supported_rates_len,
 			sta->listen_interval,
@@ -3118,7 +3134,7 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 			sta->flags | WLAN_STA_ASSOC, sta->qosinfo,
 			sta->vht_opmode, sta->p2p_ie ? 1 : 0,
 			set, sta->last_assoc_req,
-			sta->last_assoc_req_len, sta->ssi_signal)) {
+			sta->last_assoc_req_len, sta->ssi_signal, ext_capab)) {
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
 		HOSTAPD_LEVEL_NOTICE,
 		"Could not %s STA to kernel driver",
@@ -3127,6 +3143,7 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 		WLAN_REASON_DISASSOC_AP_BUSY);
 		if (sta->added_unassoc)
 			goto remove_sta;
+		os_free(ext_capab);
 		return;
 	}
 
@@ -3198,6 +3215,7 @@ remove_sta:
 	}
 
 fail:
+	os_free(ext_capab);
 	return;
 }
 
diff --git a/src/ap/sta_info.c b/src/ap/sta_info.c
index b05d355..b8fc03e 100644
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -353,6 +353,7 @@ void ap_free_sta(struct hostapd_data *hapd, struct sta_info *sta)
 
 	mbo_ap_sta_free(sta);
 	os_free(sta->supp_op_classes);
+	os_free(sta->ext_capability);
 
 	os_free(sta);
 }
diff --git a/src/ap/sta_info.h b/src/ap/sta_info.h
index 406c554..d92ac66 100644
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -167,6 +167,7 @@ struct sta_info {
 	struct ieee80211_ht_capabilities *ht_capabilities;
 	struct ieee80211_vht_capabilities *vht_capabilities;
 	u8 vht_opmode;
+	u8 *ext_capability;
 
 #ifdef CONFIG_IEEE80211W
 	int sa_query_count; /* number of pending SA Query requests;
diff --git a/src/ap/wds_wpa.c b/src/ap/wds_wpa.c
index 39926e4..d61da0d 100644
--- a/src/ap/wds_wpa.c
+++ b/src/ap/wds_wpa.c
@@ -460,7 +460,7 @@ int ltq_wds_wpa_add(struct hostapd_data *hapd, const u8 *src)
           sta->flags & WLAN_STA_VHT ? &vht_cap : NULL,
           sta->flags, sta->qosinfo, sta->vht_opmode,
           sta->p2p_ie ? 1 : 0, 0, sta->last_assoc_req,
-          sta->last_assoc_req_len, sta->ssi_signal)) {
+          sta->last_assoc_req_len, sta->ssi_signal, NULL)) {
     hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
              HOSTAPD_LEVEL_NOTICE,
              "Could not add STA to kernel driver");
-- 
2.10.1

