From eaa7045d403f6809cd79b90e45b1b515195110b8 Mon Sep 17 00:00:00 2001
From: "Bejs, Vadim" <vadim.bejs@intel.com>
Date: Wed, 14 Mar 2018 15:15:28 +0200
Subject: [PATCH] rtlog-apps

This patch implements RT logger extesions
---
 hostapd/.config                   |   4 +
 hostapd/Makefile                  |  18 +-
 hostapd/main.c                    |  43 +++
 src/drivers/genetlink.c           | 252 +++++++++++++++
 src/drivers/genetlink.h           |  23 ++
 src/drivers/genetlink_priv.h      |  53 ++++
 src/utils/Makefile                |   1 +
 src/utils/wpa_debug.c             |  21 ++
 src/utils/wpa_debug.h             |   2 +-
 src/utils/wpa_rtlogger.c          | 626 ++++++++++++++++++++++++++++++++++++++
 src/utils/wpa_rtlogger.h          | 223 ++++++++++++++
 wpa_supplicant/.config            |   4 +
 wpa_supplicant/.config.2build     |  18 ++
 wpa_supplicant/Makefile           |  25 +-
 wpa_supplicant/main.c             |  21 ++
 wpa_supplicant/wpa_supplicant.c   |  28 ++
 wpa_supplicant/wpa_supplicant_i.h |  16 +
 17 files changed, 1375 insertions(+), 3 deletions(-)
 create mode 100644 src/drivers/genetlink.c
 create mode 100644 src/drivers/genetlink.h
 create mode 100644 src/drivers/genetlink_priv.h
 create mode 100644 src/utils/wpa_rtlogger.c
 create mode 100644 src/utils/wpa_rtlogger.h
 create mode 100644 wpa_supplicant/.config.2build

diff --git a/hostapd/.config b/hostapd/.config
index b469dec..8fb9a46 100644
--- a/hostapd/.config
+++ b/hostapd/.config
@@ -175,6 +175,10 @@ CONFIG_IEEE80211AC=y
 # same file, e.g., using trace-cmd.
 #CONFIG_DEBUG_LINUX_TRACING=y
 
+# Remove RT Logger's capabilities to reduce the size of hostapd code.
+# Disabled by default.
+#CONFIG_NO_WPA_RTLOGGER=y
+
 # Remove support for RADIUS accounting
 #CONFIG_NO_ACCOUNTING=y
 
diff --git a/hostapd/Makefile b/hostapd/Makefile
index e3bdf3a..9d051ca 100644
--- a/hostapd/Makefile
+++ b/hostapd/Makefile
@@ -1027,6 +1027,16 @@ OBJS += ../src/rsn_supp/peerkey.o
 OBJS += ../src/rsn_supp/wpa_ie.o
 endif
 
+ifdef CONFIG_NO_WPA_RTLOGGER
+CFLAGS += -DCONFIG_NO_WPA_RTLOGGER
+else
+OBJS += ../src/drivers/genetlink.o
+OBJS += ../src/utils/wpa_rtlogger.o
+LIBS_c += -lnl-genl-3 -lnl-3
+OBJS_c += ../src/drivers/genetlink.o
+OBJS_c += ../src/utils/wpa_rtlogger.o
+endif
+
 ALL=hostapd hostapd_cli
 
 all: verify_config $(ALL)
@@ -1096,7 +1106,13 @@ install: $(addprefix $(DESTDIR)$(BINDIR)/,$(ALL))
 	fi
 	@touch ../src/crypto/build.hostapd
 
-BCHECK=../src/drivers/build.hostapd ../src/rsn_supp/build.hostapd ../src/common/build.hostapd ../src/wps/build.hostapd ../src/crypto/build.hostapd
+../src/utils/build.hostapd:
+	@if [ -f ../src/utils/build.wpa_supplicant ]; then \
+		$(MAKE) -C ../src/utils clean; \
+	fi
+	@touch ../src/utils/build.hostapd
+
+BCHECK=../src/drivers/build.hostapd ../src/rsn_supp/build.hostapd ../src/common/build.hostapd ../src/wps/build.hostapd ../src/crypto/build.hostapd ../src/utils/build.hostapd
 
 hostapd: $(BCHECK) $(OBJS)
 	$(Q)$(CC) $(LDFLAGS) -o hostapd $(OBJS) $(LIBS) $(LDFLAGS)
diff --git a/hostapd/main.c b/hostapd/main.c
index 5806f59..0760481 100644
--- a/hostapd/main.c
+++ b/hostapd/main.c
@@ -15,6 +15,9 @@
 #include "utils/common.h"
 #include "utils/eloop.h"
 #include "utils/uuid.h"
+#ifndef CONFIG_NO_WPA_RTLOGGER
+#include "utils/wpa_rtlogger.h"
+#endif /* CONFIG_NO_WPA_RTLOGGER */
 #include "crypto/random.h"
 #include "crypto/tls.h"
 #include "common/version.h"
@@ -628,9 +631,38 @@ static void hostapd_periodic(void *eloop_ctx, void *timeout_ctx)
 }
 
 
+#ifndef CONFIG_NO_WPA_RTLOGGER
+static struct wpa_rtlogger_data * hostapd_rtlogger_init(struct wpa_rtlogger_config *cfg, struct hapd_interfaces *interfaces)
+{
+	if (wpa_rtlogger_get_if_num(cfg, interfaces->iface[0]->conf->bss[0]->iface)) {
+		return NULL;
+	}
+
+	wpa_printf(MSG_INFO, "interface ID: %u", cfg->wlan_if);
+
+	cfg->is_static = TRUE;
+	cfg->ctx = NULL;
+	cfg->gid = WPA_RTLOGGER_APP_GID_HOSTAPD;
+	os_snprintf(cfg->app_name, sizeof(WPA_RTLOGGER_APP_NAME_HOSTAPD),
+				"%s", WPA_RTLOGGER_APP_NAME_HOSTAPD);
+	return wpa_rtlogger_init(cfg);
+}
+
+
+static void hostapd_rtlogger_deinit(struct wpa_rtlogger_data *data)
+{
+	wpa_rtlogger_deinit(data);
+}
+#endif /* CONFIG_NO_WPA_RTLOGGER */
+
+
 int main(int argc, char *argv[])
 {
 	struct hapd_interfaces interfaces;
+#ifndef CONFIG_NO_WPA_RTLOGGER
+	struct wpa_rtlogger_config rtlogger_config;
+	struct wpa_rtlogger_data *rtlogger_data = NULL;
+#endif /* CONFIG_NO_WPA_RTLOGGER */
 	int ret = 1;
 	size_t i, j;
 	int c, debug = 0, daemonize = 0;
@@ -869,6 +901,14 @@ int main(int argc, char *argv[])
 
 	hostapd_global_ctrl_iface_init(&interfaces);
 
+#ifndef CONFIG_NO_WPA_RTLOGGER
+	rtlogger_data = hostapd_rtlogger_init(&rtlogger_config, &interfaces);
+	if (rtlogger_data == NULL) {
+		wpa_printf(MSG_ERROR, "Failed to initialize RT Logger");
+		/*goto out;*/ /* to run w/o RT Logger as well */
+	}
+#endif /* CONFIG_NO_WPA_RTLOGGER */
+
 	if (hostapd_global_run(&interfaces, daemonize, pid_file)) {
 		wpa_printf(MSG_ERROR, "Failed to start eloop");
 		goto out;
@@ -877,6 +917,9 @@ int main(int argc, char *argv[])
 	ret = 0;
 
  out:
+#ifndef CONFIG_NO_WPA_RTLOGGER
+	hostapd_rtlogger_deinit(rtlogger_data);
+#endif /* CONFIG_NO_WPA_RTLOGGER */
 	hostapd_global_ctrl_iface_deinit(&interfaces);
 	/* Deinitialize all interfaces */
 
diff --git a/src/drivers/genetlink.c b/src/drivers/genetlink.c
new file mode 100644
index 0000000..274c478
--- /dev/null
+++ b/src/drivers/genetlink.c
@@ -0,0 +1,252 @@
+#ifndef CONFIG_NO_WPA_RTLOGGER
+
+#include "includes.h"
+#include "common.h"
+#include "eloop.h"
+
+#include <netlink/genl/genl.h>
+#include <netlink/genl/ctrl.h>
+#include "genetlink.h"
+#include "genetlink_priv.h"
+#include "wpa_rtlogger.h"
+
+
+struct genetlink_data {
+	struct genetlink_config *cfg;
+	struct nl_sock *sock;
+	int sock_fd;
+	int family;
+};
+
+
+static const char rxmsg_fingerprint[] = {'m', 't', 'l', 'k'};
+static struct nla_policy rxmsg_policy[MTLK_GENL_ATTR_MAX + 1] =
+{
+	[MTLK_GENL_ATTR_EVENT] = { .type = NLA_UNSPEC,
+							   .minlen = sizeof(struct mtlk_nl_msghdr),
+							   .maxlen = 0 }
+};
+
+
+static void parse_rxmsg(struct genetlink_data *genetlink, struct mtlk_nl_msghdr *hdr)
+{
+	if (os_memcmp(hdr->fingerprint, rxmsg_fingerprint, sizeof(rxmsg_fingerprint))) {
+		wpa_printf(MSG_ERROR, "genetlink: wrong fingerprint (%s) in "
+			   "incoming message's header, expected (%s)", hdr->fingerprint,
+			   rxmsg_fingerprint);
+		return;
+	}
+	if (hdr->cmd_id != genetlink->cfg->genetlink_cmd) {
+		wpa_printf(MSG_ERROR, "genetlink: wrong command's id (0x%02X) in "
+			   "incoming message's header, expected (0x%02X)", hdr->cmd_id,
+			   genetlink->cfg->genetlink_cmd);
+		return;
+	}
+	if (hdr->proto_ver != MTLK_NL_PROTOCOL_VERSION) {
+		wpa_printf(MSG_ERROR, "genetlink: wrong protocol's version (%d) in "
+			   "incoming message's header, expected (%d)", hdr->proto_ver,
+			   MTLK_NL_PROTOCOL_VERSION);
+		return;
+	}
+	if (genetlink->cfg->rxmsg_cb == NULL) {
+		wpa_printf(MSG_ERROR, "genetlink: user's callback function not found");
+		return;
+	}
+	genetlink->cfg->rxmsg_cb(genetlink->cfg->ctx, (void *)(hdr + 1));
+}
+
+
+static int genetlink_parse_rxmsg_cb(struct nl_msg *msg, void *arg)
+{
+	struct nlmsghdr *hdr = nlmsg_hdr(msg);
+	struct nlattr *attr[MTLK_GENL_ATTR_MAX + 1];
+	struct genetlink_data *genetlink = arg;
+
+	if (hdr->nlmsg_type != genetlink->family) {
+		wpa_printf(MSG_ERROR, "genetlink: Invalid family ID for incoming message");
+		return NL_SKIP;
+	}
+	if (genlmsg_parse(hdr, 0, attr, MTLK_GENL_ATTR_MAX, rxmsg_policy) < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to parse incoming message");
+		return NL_SKIP;
+	}
+
+	if (attr[MTLK_GENL_ATTR_EVENT])
+		parse_rxmsg(genetlink, (struct mtlk_nl_msghdr *)nla_data(attr[MTLK_GENL_ATTR_EVENT]));
+	else
+		wpa_printf(MSG_ERROR, "genetlink: Failed to find correct attribute in incoming message");
+
+	return NL_OK;
+}
+
+
+static void genetlink_receive(int sock_fd, void *eloop_ctx, void *sock_ctx)
+{
+	struct genetlink_data *genetlink = eloop_ctx;
+
+	if (nl_recvmsgs_default(genetlink->sock) < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to receive message: %s",
+			   strerror(errno));
+	}
+}
+
+
+struct genetlink_data * genetlink_init(struct genetlink_config *cfg)
+{
+	int genetlink_bcast_group;
+	struct genetlink_data *genetlink;
+
+	genetlink = os_zalloc(sizeof(*genetlink));
+	if (genetlink == NULL)
+		return NULL;
+
+	genetlink->cfg = cfg;
+	genetlink->sock = nl_socket_alloc();
+	if (genetlink->sock == NULL) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to open generic netlink "
+			   "socket: %s", strerror(errno));
+		genetlink_deinit(genetlink);
+		return NULL;
+	}
+
+	nl_socket_disable_seq_check(genetlink->sock);
+	nl_socket_disable_auto_ack(genetlink->sock);
+	nl_socket_enable_msg_peek(genetlink->sock);
+	nl_socket_modify_cb(genetlink->sock, NL_CB_VALID, NL_CB_CUSTOM,
+		   genetlink_parse_rxmsg_cb, genetlink);
+
+	if (genl_connect(genetlink->sock) < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to connect to generic netlink "
+			   "controller: %s", strerror(errno));
+		genetlink_deinit(genetlink);
+		return NULL;
+	}
+	genetlink->sock_fd = nl_socket_get_fd(genetlink->sock);
+	if (genetlink->sock_fd < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to get generic netlink file "
+			   "descriptor: %s", strerror(errno));
+		genetlink_deinit(genetlink);
+		return NULL;
+	}
+	genetlink->family = genl_ctrl_resolve(genetlink->sock, MTLK_GENL_FAMILY_NAME);
+	if (genetlink->family < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to get generic netlink family "
+			   "identifier: %s", strerror(errno));
+		genetlink_deinit(genetlink);
+		return NULL;
+	}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 13, 0)
+	genetlink_bcast_group = genetlink->family + cfg->genetlink_group - 1;
+#else
+	genetlink_bcast_group = genl_ctrl_resolve_grp(genetlink->sock,
+		   MTLK_GENL_FAMILY_NAME, MTLK_NETLINK_RTLOG_APPS_GROUP_NAME);
+	if (genetlink_bcast_group < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to get generic netlink "
+			   "broadcast group identifier: %s", strerror(errno));
+		genetlink_deinit(genetlink);
+		return NULL;
+	}
+#endif
+	if (nl_socket_add_membership(genetlink->sock, genetlink_bcast_group) < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to add membership to generic netlink "
+			   "socket group %d: %s", genetlink_bcast_group, strerror(errno));
+		genetlink_deinit(genetlink);
+		return NULL;
+	}
+
+	if (eloop_register_read_sock(genetlink->sock_fd,
+			   genetlink_receive, genetlink, NULL) < 0) {
+		wpa_printf(MSG_ERROR, "genetlink: Failed to register read socket "
+			   "in eloop: %d", -1);
+		genetlink_deinit(genetlink);
+		return NULL;
+	}
+	wpa_printf(/*MSG_INFO*/MSG_DEBUG, "genetlink: Initialization done.");
+
+	return genetlink;
+}
+
+
+void genetlink_deinit(struct genetlink_data *genetlink)
+{
+	if (genetlink == NULL)
+		return;
+	if (genetlink->sock != NULL) {
+		eloop_unregister_read_sock(genetlink->sock_fd);
+		nl_close(genetlink->sock);
+		nl_socket_free(genetlink->sock);
+	}
+	if (!genetlink->cfg->is_static)
+		os_free(genetlink->cfg);
+	os_free(genetlink);
+
+	wpa_printf(/*MSG_INFO*/MSG_DEBUG, "genetlink: Cleanup done");
+}
+
+
+int genetlink_send_msg(struct genetlink_data *genetlink, const void *data,
+			   const int data_len)
+{
+	/* Note! Console log is allowed in this function only */
+	struct nl_msg *msg;
+	struct nlattr *attr;
+	void *msg_hdr;
+	struct mtlk_nl_msghdr *hdr;
+	int res = -1;
+
+	if ((genetlink == NULL) || (data == NULL) || (data_len == 0)) {
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+		wpa_printf(MSG_ERROR, "genetlink: Failed to send message: "
+			   "data buffer is empty");
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		if (wpa_rtlogger_get_flags(MSG_ERROR) & WPA_RTLOGGER_LOG_TARGET_CONSOLE)
+			CERROR("genetlink: Failed to send message: data buffer is empty");
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		return res;
+	}
+
+	msg = nlmsg_alloc();
+	if (msg == NULL)
+		return res;
+
+	msg_hdr = genlmsg_put(msg, NL_AUTO_PID, NL_AUTO_SEQ, genetlink->family,
+			    0, 0, MTLK_GENL_CMD_EVENT, MTLK_GENL_FAMILY_VERSION);
+	if (msg_hdr == NULL)
+		goto out;
+
+	attr = nla_reserve(msg, MTLK_GENL_ATTR_EVENT, data_len + sizeof(*hdr));
+	if (attr == NULL)
+		goto out;
+
+	hdr = (struct mtlk_nl_msghdr *)nla_data(attr);
+	os_memcpy(hdr->fingerprint, rxmsg_fingerprint, sizeof(rxmsg_fingerprint));
+	hdr->proto_ver = MTLK_NL_PROTOCOL_VERSION;
+	hdr->cmd_id = genetlink->cfg->genetlink_cmd;
+	hdr->data_len = data_len;
+	os_memcpy((char *)hdr + sizeof(*hdr), data, data_len);
+
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+	wpa_printf(MSG_DEBUG, "genetlink: Trying to send message");
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+	if (wpa_rtlogger_get_flags(MSG_DEBUG) & WPA_RTLOGGER_LOG_TARGET_CONSOLE)
+		CLOG("genetlink: Trying to send message");
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+
+	res = nl_send_auto_complete(genetlink->sock, msg);
+	if (res < 0) {
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+		wpa_printf(MSG_ERROR, "genetlink: Failed to send message via "
+			   "generic netlink: %s", strerror(errno));
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		if (wpa_rtlogger_get_flags(MSG_ERROR) & WPA_RTLOGGER_LOG_TARGET_CONSOLE) {
+			CERROR("genetlink: Failed to send message via generic netlink: "
+				   "%s", strerror(errno));
+		}
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+	}
+out:
+	nlmsg_free(msg);
+	return res;
+}
+
+#endif /* CONFIG_NO_WPA_RTLOGGER */
diff --git a/src/drivers/genetlink.h b/src/drivers/genetlink.h
new file mode 100644
index 0000000..639b350
--- /dev/null
+++ b/src/drivers/genetlink.h
@@ -0,0 +1,23 @@
+#ifndef GENETLINK_H
+#define GENETLINK_H
+
+#include <stdbool.h>
+
+
+typedef void (*genetlink_cb)(void *ctx, void *data);
+
+struct genetlink_config {
+	bool is_static;			/* if TRUE, then memory is allocated statically */
+	void *ctx;				/* pointer to context */
+	genetlink_cb rxmsg_cb;	/* pointer to receive call-back function */
+	int genetlink_group;	/* use NETLINK_RTLOG_APPS_GROUP */
+	u8 genetlink_cmd;		/* use NL_DRV_CMD_RTLOG_NOTIFY */
+};
+
+
+struct genetlink_data * genetlink_init(struct genetlink_config *cfg);
+void genetlink_deinit(struct genetlink_data *genetlink);
+int genetlink_send_msg(struct genetlink_data *genetlink, const void *data,
+			   const int data_len);
+
+#endif /* GENETLINK_H */
diff --git a/src/drivers/genetlink_priv.h b/src/drivers/genetlink_priv.h
new file mode 100644
index 0000000..e5d54d2
--- /dev/null
+++ b/src/drivers/genetlink_priv.h
@@ -0,0 +1,53 @@
+#ifndef GENETLINK_PRIV_H
+#define GENETLINK_PRIV_H
+
+#include <linux/version.h>
+
+
+/* Family name and version */
+#define MTLK_GENL_FAMILY_NAME		"MTLK_WLS"
+#define MTLK_GENL_FAMILY_VERSION	1
+
+
+/* Attributes of the family */
+enum {
+	MTLK_GENL_ATTR_UNSPEC,
+	MTLK_GENL_ATTR_EVENT,
+	__MTLK_GENL_ATTR_MAX
+};
+#define MTLK_GENL_ATTR_MAX	(__MTLK_GENL_ATTR_MAX - 1)
+
+
+/* Supported commands */
+enum {
+	MTLK_GENL_CMD_UNSPEC,
+	MTLK_GENL_CMD_EVENT,
+	__MTLK_GENL_CMD_MAX
+};
+#define MTLK_GENL_CMD_MAX	(__MTLK_GENL_CMD_MAX - 1)
+
+
+/* Protocol version */
+#define MTLK_NL_PROTOCOL_VERSION	1
+/* Command ID */
+#define NL_DRV_CMD_RTLOG_NOTIFY		8
+
+
+/* Group */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 13, 0)
+#define NETLINK_RTLOG_APPS_GROUP			(1L << 3)
+#else
+#define MTLK_NETLINK_RTLOG_APPS_GROUP_NAME	"mtlk_rtlog_apps"
+#define NETLINK_RTLOG_APPS_GROUP			(3L << 0)
+#endif
+
+
+/* Message header */
+struct mtlk_nl_msghdr {
+	char fingerprint[4];
+	u8 proto_ver;
+	u8 cmd_id;
+	u16 data_len;
+} __attribute__ ((aligned(1), packed));
+
+#endif /* GENETLINK_PRIV_H */
diff --git a/src/utils/Makefile b/src/utils/Makefile
index 8aad813..5b220db 100644
--- a/src/utils/Makefile
+++ b/src/utils/Makefile
@@ -2,6 +2,7 @@ all: libutils.a
 
 clean:
 	rm -f *~ *.o *.d *.gcno *.gcda *.gcov libutils.a
+	rm -f build.wpa_supplicant build.hostapd
 
 install:
 	@echo Nothing to be made.
diff --git a/src/utils/wpa_debug.c b/src/utils/wpa_debug.c
index 6b477f6..1f0e5c1 100644
--- a/src/utils/wpa_debug.c
+++ b/src/utils/wpa_debug.c
@@ -10,6 +10,10 @@
 
 #include "common.h"
 
+#ifndef CONFIG_NO_WPA_RTLOGGER
+#include "wpa_rtlogger.h"
+#endif /* CONFIG_NO_WPA_RTLOGGER */
+
 #ifdef CONFIG_DEBUG_SYSLOG
 #include <syslog.h>
 
@@ -207,6 +211,7 @@ const char* msg_hdr[] = { "EXCESSIVE", "MSGDUMP", "DEBUG", "INFO", "WARNING", "E
  */
 void wpa_printf(int level, const char *fmt, ...)
 {
+#if defined CONFIG_NO_WPA_RTLOGGER || defined CONFIG_WPA_RTLOGGER_RUN_DEMO
 	va_list ap;
 
 	va_start(ap, fmt);
@@ -259,6 +264,20 @@ void wpa_printf(int level, const char *fmt, ...)
 		va_end(ap);
 	}
 #endif /* CONFIG_DEBUG_LINUX_TRACING */
+
+#else /* !CONFIG_NO_WPA_RTLOGGER && !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+	va_list args;
+	int flags = wpa_rtlogger_get_flags(level);
+
+	va_start(args, fmt);
+	if (flags & WPA_RTLOGGER_LOG_TARGET_REMOTE) {
+		wpa_rtlogger_remote_vlog(fmt, args);
+	}
+	if (flags & WPA_RTLOGGER_LOG_TARGET_CONSOLE) {
+		wpa_rtlogger_console_vlog(WPA_RTLOGGER_LOG_TYPE_INFO, fmt, args);
+	}
+	va_end(args);
+#endif /* CONFIG_NO_WPA_RTLOGGER */
 }
 
 
@@ -852,6 +871,8 @@ const char * debug_level_str(int level)
 		return "WARNING";
 	case MSG_ERROR:
 		return "ERROR";
+	case MSG_MUTE:
+		return "MUTE";
 	default:
 		return "?";
 	}
diff --git a/src/utils/wpa_debug.h b/src/utils/wpa_debug.h
index 17d8f96..6d923a6 100644
--- a/src/utils/wpa_debug.h
+++ b/src/utils/wpa_debug.h
@@ -19,7 +19,7 @@ extern int wpa_debug_timestamp;
  * use these for debugging purposes. */
 
 enum {
-	MSG_EXCESSIVE, MSG_MSGDUMP, MSG_DEBUG, MSG_INFO, MSG_WARNING, MSG_ERROR
+	MSG_EXCESSIVE, MSG_MSGDUMP, MSG_DEBUG, MSG_INFO, MSG_WARNING, MSG_ERROR, MSG_MUTE
 };
 
 #ifdef CONFIG_NO_STDOUT_DEBUG
diff --git a/src/utils/wpa_rtlogger.c b/src/utils/wpa_rtlogger.c
new file mode 100644
index 0000000..e3dfbcd
--- /dev/null
+++ b/src/utils/wpa_rtlogger.c
@@ -0,0 +1,626 @@
+#ifndef CONFIG_NO_WPA_RTLOGGER
+
+#include "includes.h"
+#include "common.h"
+
+#include <unistd.h>
+#include <sys/time.h>
+#include "drivers/genetlink.h"
+#include "drivers/genetlink_priv.h"
+#include "wpa_rtlogger.h"
+#ifdef CONFIG_WPA_RTLOGGER_USE_SYSLOG
+#include <syslog.h>
+#endif /* CONFIG_WPA_RTLOGGER_USE_SYSLOG */
+
+
+struct wpa_rtlogger_data {
+	struct wpa_rtlogger_config *cfg;
+	struct genetlink_data *genetlink;
+	pid_t app_pid;			/* application's PID */
+	u8 app_oid;				/* application's OID */
+	s8 cdbg_lvl;			/* level of console debug */
+	s8 rdbg_lvl;			/* level of remote debug */
+};
+
+
+/* Application's and Driver's command IDs */
+enum {
+
+	WPA_RTLOGGER_APP_TO_DRV_CMDID_STARTUP = 1,	/* Application's event - Startup */
+	WPA_RTLOGGER_APP_TO_DRV_CMDID_CLEANUP,		/* Application's event - Cleanup */
+	WPA_RTLOGGER_APP_TO_DRV_CMDID_LOG,			/* Application's event - Log-message */
+	WPA_RTLOGGER_DRV_TO_APP_CMDID_CONFIG_INIT,	/* Driver's event - RT Logger's initial Configuration */
+	WPA_RTLOGGER_DRV_TO_APP_CMDID_CONFIG_NEW,	/* Driver's event - RT Logger's new Configuration */
+	WPA_RTLOGGER_DRV_TO_APP_CMDID_CLEANUP		/* Driver's event - RT Logger's cleanup */
+};
+
+
+#define log_info_get_bfield_lid(var)	((var >> 17) & 0x3FFF)
+#define log_info_put_bfield_lid(var)	(((u32)var & 0x3FFF) << 17)
+#define log_info_get_bfield_oid(var)	((var >> 12) & 0x001F)
+#define log_info_put_bfield_oid(var)	(((u32)var & 0x001F) << 12)
+#define log_info_get_bfield_gid(var)	((var >> 5) & 0x007F)
+#define log_info_put_bfield_gid(var)	(((u32)var & 0x007F) << 5)
+#define log_info_get_bfield_fid(var)	(var & 0x001F)
+#define log_info_put_bfield_fid(var)	log_info_get_bfield_fid((u32)var)
+
+
+/* Application's and Driver's (common) message header */
+struct wpa_rtlogger_msghdr {
+	u16 cmd_id;				/* command's ID */
+	u16 length;				/* length of payload */
+	u32 pid;				/* application's PID (type of pid_t) */
+	u32 log_info;			/* LID, OID, GID, FID */
+	u32 wlan_if;            /* interface/card ID */
+	u32 log_time;			/* time-stamp of log-message */
+} STRUCT_PACKED;
+
+
+/* Application's message payload */
+struct wpa_rtlogger_app_msgpay {
+	char name[IFNAMSIZ];	/* application's name */
+} STRUCT_PACKED;
+
+
+/* Driver's message payload */
+struct wpa_rtlogger_drv_msgpay {
+	s8 cdbg_lvl;			/* level of console debug */
+	s8 rdbg_lvl;			/* level of remote debug */
+} STRUCT_PACKED;
+
+
+/* Application's message */
+struct wpa_rtlogger_app_msg {
+	struct wpa_rtlogger_msghdr hdr;
+	struct wpa_rtlogger_app_msgpay data;
+} STRUCT_PACKED;
+
+
+/* Driver's message */
+struct wpa_rtlogger_drv_msg {
+	struct wpa_rtlogger_msghdr hdr;
+	struct wpa_rtlogger_drv_msgpay data;
+} STRUCT_PACKED;
+
+
+/* Pointer to RT Logger's data */
+static struct wpa_rtlogger_data *gwpa_rtlogger = NULL;
+
+
+static inline void _copy_appname(char *dst, const char *src)
+{
+#define MIN(x, y)	((x < y) ? x : y)
+	os_memset(dst, 0, IFNAMSIZ);
+	os_snprintf(dst, MIN(os_strlen(src) + 1, IFNAMSIZ - 1), "%s", src);
+#undef MIN
+}
+
+
+static inline bool _is_dbg_lvl_changed(struct wpa_rtlogger_data *wpa_rtlogger,
+					   struct wpa_rtlogger_drv_msgpay *data)
+{
+	if ((data->cdbg_lvl != wpa_rtlogger->cdbg_lvl) ||
+		(data->rdbg_lvl != wpa_rtlogger->rdbg_lvl))
+		return true;
+
+	return false;
+}
+
+
+#ifndef CONFIG_WPA_RTLOGGER_RUN_DEMO
+static inline s8 _convert_debug_level(s8 level)
+{
+	s8 res = (s8)MSG_WARNING - level;
+
+	if (res < 0)
+		res = 0;
+	else if (res > (MSG_MUTE))
+		res = MSG_MUTE;
+
+	return res;
+}
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+
+
+#ifdef CONFIG_WPA_RTLOGGER_USE_SYSLOG
+static inline int _get_syslog_prio(wpa_rtlogger_log_type_e log_type)
+{
+	int prio = LOG_INFO;
+
+	switch (log_type)
+	{
+		case WPA_RTLOGGER_LOG_TYPE_ERROR:
+		{
+			prio = LOG_ERR;
+			break;
+		}
+		case WPA_RTLOGGER_LOG_TYPE_WARNING:
+		{
+			prio = LOG_WARNING;
+			break;
+		}
+		case WPA_RTLOGGER_LOG_TYPE_INFO:
+		{
+			prio = LOG_INFO;
+			break;
+		}
+		default: break;
+	}
+	return prio;
+}
+#endif /* CONFIG_WPA_RTLOGGER_USE_SYSLOG */
+
+
+static inline unsigned long _get_timestamp(void)
+{
+	struct timeval ts;
+
+	if (gettimeofday(&ts, NULL) != 0)
+		return 0;
+	return ts.tv_usec + (ts.tv_sec * 1000000);
+}
+
+
+static void wpa_rtlogger_parse_event(void *param, void *packet)
+{
+	u8 oid;
+	bool is_cfg_changed = false;
+	struct wpa_rtlogger_data *wpa_rtlogger = param;
+	struct wpa_rtlogger_drv_msg *msg = (struct wpa_rtlogger_drv_msg *)packet;
+	struct wpa_rtlogger_msghdr *hdr = &msg->hdr;
+	struct wpa_rtlogger_drv_msgpay *data = &msg->data;
+
+	oid = log_info_get_bfield_oid(hdr->log_info);
+
+	wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Notification message received from mtlkroot: "
+		   "cmd_id=0x%04X, data_len=%d, oid=%d, params=[cdebug=%d, rdebug=%d]",
+		   hdr->cmd_id, hdr->length, oid, data->cdbg_lvl, data->rdbg_lvl);
+
+#ifndef CONFIG_WPA_RTLOGGER_RUN_DEMO
+	/* Convert debug levels to internal format */
+	data->cdbg_lvl = _convert_debug_level(data->cdbg_lvl);
+	data->rdbg_lvl = _convert_debug_level(data->rdbg_lvl);
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+
+	switch (hdr->cmd_id)
+	{
+		case WPA_RTLOGGER_DRV_TO_APP_CMDID_CONFIG_INIT:
+		{
+			/* Check received PID, if invalid then ignore message */
+			if (hdr->pid == (u32)wpa_rtlogger->app_pid) {
+				/* Save OID */
+				wpa_rtlogger->app_oid = oid;
+				is_cfg_changed = true;
+			}
+			else {
+				wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Notification message ignored from mtlkroot "
+					   "due to invalid PID: own_pid=%d, received_pid=%d",
+					   wpa_rtlogger->app_pid, hdr->pid);
+			}
+			break;
+		}
+		case WPA_RTLOGGER_DRV_TO_APP_CMDID_CONFIG_NEW:
+		{
+			/* Check received OID, if invalid then ignore message */
+			if (oid == (u32)wpa_rtlogger->app_oid) {
+				/* Check that debug level is changed, if not changed then ignore the message */
+				is_cfg_changed = _is_dbg_lvl_changed(wpa_rtlogger, data);
+				if (!is_cfg_changed) {
+					wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Notification message ignored from mtlkroot "
+						   "due to unchanged debug level");
+				}
+			}
+			else {
+				wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Notification message ignored from mtlkroot "
+					   "due to invalid OID: own_oid=%d, received_oid=%d",
+					   wpa_rtlogger->app_oid, oid);
+			}
+			break;
+		}
+		case WPA_RTLOGGER_DRV_TO_APP_CMDID_CLEANUP:
+		{
+			/* Disable remote debug */
+			data->cdbg_lvl = wpa_rtlogger->cdbg_lvl;
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+			data->rdbg_lvl = -1;
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+			data->rdbg_lvl = MSG_ERROR + 1;
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+			is_cfg_changed = _is_dbg_lvl_changed(wpa_rtlogger, data);
+			break;
+		}
+		default: break;
+	}
+
+	if (is_cfg_changed) {
+		wpa_rtlogger->cdbg_lvl = data->cdbg_lvl;
+		wpa_rtlogger->rdbg_lvl = data->rdbg_lvl;
+		wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Notification message from mtlkroot processed: "
+			   "debug level set to: [cdebug=%s, rdebug=%s]",
+			   debug_level_str(wpa_rtlogger->cdbg_lvl), debug_level_str(wpa_rtlogger->rdbg_lvl));
+	}
+
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+	/* DEMO: only this code line */
+	wpa_rtlogger_ilog1_d_9(__FUNCTION__, 1, 9, 1, 2, __LINE__,
+		   "wpa_rtlogger: Notification message received from mtlkroot: cmd_id=0x%04X", hdr->cmd_id);
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+	wpa_printf(MSG_INFO, "wpa_rtlogger: Notification message received from mtlkroot: "
+		   "cmd_id=0x%04X", hdr->cmd_id);
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+}
+
+
+static int wpa_rtlogger_send_event(struct wpa_rtlogger_data *wpa_rtlogger, const u8 cmd)
+{
+	struct wpa_rtlogger_app_msg msg;
+	struct wpa_rtlogger_msghdr *hdr = &msg.hdr;
+	struct wpa_rtlogger_app_msgpay *data = &msg.data;
+
+	//if (wpa_rtlogger == NULL)
+	//	return - 1;
+
+	os_memset(hdr, 0, sizeof(*hdr));
+	hdr->cmd_id = (u16)cmd;
+	hdr->length = sizeof(*data);
+	hdr->pid = (u32)wpa_rtlogger->app_pid;
+	//hdr->log_info = 0;
+	//hdr->log_time = 0;
+	_copy_appname(data->name, wpa_rtlogger->cfg->app_name);
+
+	return genetlink_send_msg(wpa_rtlogger->genetlink, (void *)&msg, sizeof(msg));
+}
+
+
+int wpa_rtlogger_send_logevent(struct wpa_rtlogger_data *wpa_rtlogger,
+		   const u32 ids /* LID, OID, GID, FID */,
+		   const u32 timestamp, const void *data, const u16 data_len)
+{
+	/* Note! Console log is allowed in this function only */
+	int res;
+	void *msg;
+	size_t msg_len;
+	struct wpa_rtlogger_msghdr *msgbody_hdr;
+	struct wpa_rtlogger_app_msgpay *msgbody_app;
+	void *msgbody_log;
+
+	if ((data == NULL) || (data_len == 0)) {
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+		wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Failed to send log-message: "
+			   "data buffer is empty");
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		if (wpa_rtlogger_get_flags(MSG_ERROR) & WPA_RTLOGGER_LOG_TARGET_CONSOLE)
+			CERROR("wpa_rtlogger: Failed to send log-message: data buffer is empty");
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		return 0;
+	}
+
+	if (wpa_rtlogger == NULL) {
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+		wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Failed to send log-message: "
+			   "RT-logger not initialized yet");
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		if (wpa_rtlogger_get_flags(MSG_ERROR) & WPA_RTLOGGER_LOG_TARGET_CONSOLE)
+			CERROR("wpa_rtlogger: Failed to send log-message: RT-logger not initialized yet");
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		return 0;
+	}
+
+	msg_len = (size_t)data_len + sizeof(struct wpa_rtlogger_app_msg);
+	msg = os_malloc(msg_len);
+	if (msg == NULL) {
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+		wpa_printf(MSG_ERROR, "wpa_rtlogger: Failed to allocate memory for message");
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		if (wpa_rtlogger_get_flags(MSG_ERROR) & WPA_RTLOGGER_LOG_TARGET_CONSOLE)
+			CERROR("wpa_rtlogger: Failed to allocate memory for message");
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		return -1;
+	}
+
+	msgbody_hdr = (struct wpa_rtlogger_msghdr *)msg;
+	msgbody_app = (struct wpa_rtlogger_app_msgpay *)(msgbody_hdr + 1);
+	msgbody_log = (void *)(msgbody_app + 1);
+
+	msgbody_hdr->cmd_id = (u16)WPA_RTLOGGER_APP_TO_DRV_CMDID_LOG;
+	msgbody_hdr->length = data_len + (u16)sizeof(*msgbody_app);
+	msgbody_hdr->pid = (u32)wpa_rtlogger->app_pid;
+	msgbody_hdr->log_info = ids;
+	msgbody_hdr->wlan_if = wpa_rtlogger->cfg->wlan_if;
+	msgbody_hdr->log_time = timestamp;
+	_copy_appname(msgbody_app->name, wpa_rtlogger->cfg->app_name);
+	os_memcpy(msgbody_log, data, (size_t)data_len);
+
+	res = genetlink_send_msg(wpa_rtlogger->genetlink, msg, msg_len);
+	os_free(msg);
+	return res;
+}
+
+int wpa_rtlogger_get_if_num(struct wpa_rtlogger_config *cfg, const char *ifname)
+{
+	char *first_digit = strpbrk(ifname, "0123456789");
+	int  if_num;
+
+	if (!first_digit) {
+		wpa_printf(MSG_ERROR, "Error occurred getting interface number: %s\n", ifname);
+		return -1;
+	}
+
+	if_num = (int)(first_digit[0] - '0') / 2;
+	if (if_num < 0) {
+		wpa_printf(MSG_ERROR, "Sanity check error occurred getting interface number %d\n", if_num);
+		return -1;
+	}
+
+	cfg->wlan_if = if_num;
+	return 0;
+}
+
+struct wpa_rtlogger_data * wpa_rtlogger_init(struct wpa_rtlogger_config *cfg)
+{
+	struct wpa_rtlogger_data *wpa_rtlogger;
+	struct genetlink_config *genetlink_cfg;
+
+	wpa_rtlogger = os_zalloc(sizeof(*wpa_rtlogger));
+	if (wpa_rtlogger == NULL)
+		return NULL;
+
+	wpa_rtlogger->cfg = cfg;
+	wpa_rtlogger->app_pid = getpid();
+	wpa_rtlogger->app_oid = WPA_RTLOGGER_APP_OID_INVALID;
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+	wpa_rtlogger->cdbg_lvl = (s8)(-1);
+	wpa_rtlogger->rdbg_lvl = (s8)(-1);
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+	wpa_rtlogger->cdbg_lvl = (s8)(MSG_INFO);
+	wpa_rtlogger->rdbg_lvl = (s8)(MSG_ERROR + 1);	/* remote logger is disabled */
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+
+	genetlink_cfg = os_zalloc(sizeof(*genetlink_cfg));
+	if (genetlink_cfg == NULL) {
+		wpa_printf(MSG_ERROR, "wpa_rtlogger: Failed to allocate memory for genetlink "
+			   "configuration");
+		wpa_rtlogger_deinit(wpa_rtlogger);
+		return NULL;
+	}
+	genetlink_cfg->is_static = false;
+	genetlink_cfg->ctx = (void *)wpa_rtlogger;
+	genetlink_cfg->rxmsg_cb = wpa_rtlogger_parse_event;
+	genetlink_cfg->genetlink_group = NETLINK_RTLOG_APPS_GROUP;
+	genetlink_cfg->genetlink_cmd = NL_DRV_CMD_RTLOG_NOTIFY;
+	wpa_rtlogger->genetlink = genetlink_init(genetlink_cfg);
+	if (wpa_rtlogger->genetlink == NULL) {
+		wpa_printf(MSG_ERROR, "wpa_rtlogger: Failed to initialize genetlink");
+		wpa_rtlogger_deinit(wpa_rtlogger);
+		return NULL;
+	}
+	gwpa_rtlogger = wpa_rtlogger;
+
+#ifdef CONFIG_WPA_RTLOGGER_USE_SYSLOG
+	openlog(cfg->app_name, 0, LOG_DAEMON);
+#endif /* CONFIG_WPA_RTLOGGER_USE_SYSLOG */
+
+	if (wpa_rtlogger_send_event(wpa_rtlogger, WPA_RTLOGGER_APP_TO_DRV_CMDID_STARTUP) < 0) {
+		wpa_rtlogger_deinit(wpa_rtlogger);
+		return NULL;
+	}
+
+	wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Initialization done");
+	return wpa_rtlogger;
+}
+
+
+void wpa_rtlogger_deinit(struct wpa_rtlogger_data *wpa_rtlogger)
+{
+	if (wpa_rtlogger == NULL)
+		return;
+
+	gwpa_rtlogger = NULL;
+
+	if (wpa_rtlogger->genetlink != NULL) {
+		wpa_rtlogger_send_event(wpa_rtlogger, WPA_RTLOGGER_APP_TO_DRV_CMDID_CLEANUP);
+		genetlink_deinit(wpa_rtlogger->genetlink);
+	}
+
+#ifdef CONFIG_WPA_RTLOGGER_USE_SYSLOG
+	closelog();
+#endif /* CONFIG_WPA_RTLOGGER_USE_SYSLOG */
+
+	if (!wpa_rtlogger->cfg->is_static)
+		os_free(wpa_rtlogger->cfg);
+	os_free(wpa_rtlogger);
+
+	wpa_printf(/*MSG_INFO*/MSG_DEBUG, "wpa_rtlogger: Cleanup done");
+}
+
+
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+int wpa_rtlogger_get_flags(int level, int gid)
+{
+	int flags = 0;
+	gid = gid;	/* application uses the same debug level for all GIDs */
+
+	if (gwpa_rtlogger != NULL) {
+		if (level <= gwpa_rtlogger->cdbg_lvl)
+			flags |= WPA_RTLOGGER_LOG_TARGET_CONSOLE;
+		if (level <= gwpa_rtlogger->rdbg_lvl)
+			flags |= WPA_RTLOGGER_LOG_TARGET_REMOTE;
+	}
+	return flags;
+}
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+int wpa_rtlogger_get_flags(int level)
+{
+	int flags = 0;
+
+	if (gwpa_rtlogger != NULL) {
+		if (level >= gwpa_rtlogger->cdbg_lvl)
+			flags |= WPA_RTLOGGER_LOG_TARGET_CONSOLE;
+		if (level >= gwpa_rtlogger->rdbg_lvl)
+			flags |= WPA_RTLOGGER_LOG_TARGET_REMOTE;
+	}
+	else {
+		if (level >= wpa_debug_level)
+			flags |= WPA_RTLOGGER_LOG_TARGET_CONSOLE;
+	}
+	return flags;
+}
+
+
+void wpa_rtlogger_console_vlog(const wpa_rtlogger_log_type_e log_type, const char *fmt, va_list args)
+{
+	int cnt = 0, offs = 0;
+	char buffer[CONFIG_WPA_RTLOGGER_PRINT_BUFFER_MAX_SIZE] = {0};
+
+	//if (gwpa_rtlogger == NULL)
+	//	return;
+
+	cnt = snprintf(buffer, sizeof(buffer) - offs, "[%010lu]: ", _get_timestamp());
+	if (cnt >= (sizeof(buffer) - offs))
+		goto end;
+
+	offs += cnt;
+	vsnprintf(buffer + offs, sizeof(buffer) - offs, fmt, args);
+end:
+	buffer[sizeof(buffer) - 1] = 0;
+
+#ifdef CONFIG_WPA_RTLOGGER_USE_SYSLOG
+	/* Print to syslog */
+	syslog(_get_syslog_prio(log_type), "%s", buffer);
+#endif /* CONFIG_WPA_RTLOGGER_USE_SYSLOG */
+	/* Print to stdout */
+	fprintf(stdout, "%s\n", buffer);
+}
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+
+
+void wpa_rtlogger_console_log(const wpa_rtlogger_log_type_e log_type,
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+		   const char *fname, const int line_no, const char *log_level,
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+		   const char *fmt, ...)
+{
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+	int cnt = 0, offs = 0;
+	char buffer[CONFIG_WPA_RTLOGGER_PRINT_BUFFER_MAX_SIZE] = {0};
+	va_list args;
+
+	//if (gwpa_rtlogger == NULL)
+	//	return;
+
+	cnt = snprintf(buffer, sizeof(buffer) - offs, "[%010lu] %s%s[%s:%d]: ", _get_timestamp(),
+			   gwpa_rtlogger->cfg->app_name, log_level, fname, line_no);
+	if (cnt >= (sizeof(buffer) - offs))
+		goto end;
+
+	offs += cnt;
+
+	va_start(args, fmt);
+	vsnprintf(buffer + offs, sizeof(buffer) - offs, fmt, args);
+	va_end(args);
+end:
+	buffer[sizeof(buffer) - 1] = 0;
+
+#ifdef CONFIG_WPA_RTLOGGER_USE_SYSLOG
+	/* Print to syslog */
+	syslog(_get_syslog_prio(log_type), "%s", buffer);
+#endif /* CONFIG_WPA_RTLOGGER_USE_SYSLOG */
+	/* Print to stderr */
+	fprintf(stderr, "%s\n", buffer);
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+	va_list args;
+
+	va_start(args, fmt);
+	wpa_rtlogger_console_vlog(log_type, fmt, args);
+	va_end(args);
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+}
+
+
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+/* FIXME: implement this code via script (like we have for WLAN driver) */
+void wpa_rtlogger_ilog1_d_9(const char *fname, const int dbg_level,
+		   const u8 oid, const u8 gid, const u8 fid, const u16 lid,
+		   const char *fmt, s32 d1)
+{
+	int flags = wpa_rtlogger_get_flags(dbg_level, 0);
+
+	if (flags & WPA_RTLOGGER_LOG_TARGET_REMOTE) {
+		u8 *data__;
+		u32 lid_u32 = (u32)lid;
+		size_t fnamelen__ = strlen(fname) + 1;
+		size_t datalen__ = WPA_RTLOGGER_LOGMSG_STRING_SIZE(fname) +
+						   WPA_RTLOGGER_LOGMSG_SCALAR_SIZE(lid_u32) +
+						   WPA_RTLOGGER_LOGMSG_SCALAR_SIZE(d1);
+
+		if (datalen__ > 2047)
+			return;
+
+		data__ = (u8 *)os_malloc(datalen__);
+
+		if (data__ != NULL) {
+			u32 ids__ = 0;
+			u8 *p__ = data__;
+
+			WPA_RTLOGGER_LOGMSG_PUT_STRING(fname);
+			WPA_RTLOGGER_LOGMSG_PUT_INT32(lid_u32);
+			WPA_RTLOGGER_LOGMSG_PUT_INT32(d1);
+
+			ids__ = log_info_put_bfield_lid(lid) |
+					log_info_put_bfield_oid(oid) |
+					log_info_put_bfield_gid(gid) |
+					log_info_put_bfield_fid(fid);
+
+			wpa_rtlogger_send_logevent(gwpa_rtlogger, ids__, (u32)_get_timestamp(),
+					   data__, datalen__);
+			os_free(data__);
+		}
+	}
+	if (flags & WPA_RTLOGGER_LOG_TARGET_CONSOLE) {
+		CLOG(fname, lid, 1, fmt, d1);
+	}
+}
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+void wpa_rtlogger_remote_vlog(const char *fmt, va_list args)
+{
+	u8 *data;
+	size_t argslen__, datalen;
+
+	//if (gwpa_rtlogger == NULL) return;
+
+	argslen__ = (size_t)vsnprintf(NULL, 0, fmt, args) + 1;
+	datalen = WPA_RTLOGGER_LOGMSG_STRING_SIZE(args);
+
+	if (datalen > 2047)	return;
+
+	data = (u8 *)os_zalloc(datalen);
+
+	if (data != NULL) {
+		u8 *p__ = data;
+
+		WPA_RTLOGGER_LOGMSG_PUT_STRING_HEADER(args);
+		vsnprintf((char *)p__, argslen__, fmt, args);
+
+		wpa_rtlogger_send_logevent(gwpa_rtlogger,
+									log_info_put_bfield_lid(1) |
+							        log_info_put_bfield_oid(gwpa_rtlogger->app_oid) |
+							        log_info_put_bfield_gid(gwpa_rtlogger->cfg->gid) |
+							        log_info_put_bfield_fid(1),
+									(u32)_get_timestamp(),
+									(void *)data, (u16)datalen);
+		os_free((void *)data);
+	}
+}
+
+
+void wpa_rtlogger_remote_log(const char *fmt, ...)
+{
+	va_list args;
+
+	va_start(args, fmt);
+	wpa_rtlogger_remote_vlog(fmt, args);
+	va_end(args);
+}
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+
+#endif /* CONFIG_NO_WPA_RTLOGGER */
diff --git a/src/utils/wpa_rtlogger.h b/src/utils/wpa_rtlogger.h
new file mode 100644
index 0000000..06965c6
--- /dev/null
+++ b/src/utils/wpa_rtlogger.h
@@ -0,0 +1,223 @@
+#ifndef WPA_RTLOGGER_H
+#define WPA_RTLOGGER_H
+
+#define CONFIG_WPA_RTLOGGER_PRINT_BUFFER_MAX_SIZE	(2048)
+//#define CONFIG_WPA_RTLOGGER_USE_SYSLOG			(1)
+//#define CONFIG_WPA_RTLOGGER_RUN_DEMO				(1)
+
+
+#include <stdbool.h>
+
+
+/* RT Logger's configuration */
+struct wpa_rtlogger_config {
+	bool is_static;				/* if TRUE, then memory is allocated statically */
+	void *ctx;					/* pointer to context */
+	char app_name[IFNAMSIZ];	/* application's name */
+	u32  gid;					/* GID to substitute: 1 = hostapd, 2 = wpa_supplicant */
+	u32  wlan_if;               /* interface id */
+};
+
+
+/* Application's name and OID */
+#define WPA_RTLOGGER_APP_NAME_HOSTAPD		"hostapd"
+#define WPA_RTLOGGER_APP_OID_HOSTAPD		9
+#define WPA_RTLOGGER_APP_GID_HOSTAPD		1
+#define WPA_RTLOGGER_APP_NAME_WPASUPPLICANT	"wpa_supplicant"
+#define WPA_RTLOGGER_APP_OID_WPASUPPLICANT	9
+#define WPA_RTLOGGER_APP_GID_WPASUPPLICANT	2
+#define WPA_RTLOGGER_APP_OID_INVALID		255
+
+
+/* Log target flags */
+#define WPA_RTLOGGER_LOG_TARGET_CONSOLE		(1 << 0)
+#define WPA_RTLOGGER_LOG_TARGET_REMOTE		(1 << 1)
+
+
+/* Log types (error, warning, info) */
+typedef enum wpa_rtlogger_log_type {
+	WPA_RTLOGGER_LOG_TYPE_ERROR,
+	WPA_RTLOGGER_LOG_TYPE_WARNING,
+	WPA_RTLOGGER_LOG_TYPE_INFO
+} wpa_rtlogger_log_type_e;
+
+
+/* Application's log-message paylod data types */
+typedef enum wpa_rtlogger_data_type
+{
+	WPA_RTLOGGER_LOGMSG_DATA_TYPE_STRING,
+	WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT8,
+	WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT32,
+	WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT64,
+	WPA_RTLOGGER_LOGMSG_DATA_TYPE_MACADDR,
+	WPA_RTLOGGER_LOGMSG_DATA_TYPE_IP6ADDR,
+	WPA_RTLOGGER_LOGMSG_DATA_TYPE_SIGNAL
+} wpa_rtlogger_data_type_e;
+#define wpa_rtlogger_data_type_e u32
+
+
+/* Application's log-message payload element type */
+struct wpa_rtlogger_app_logmsgelem_type {
+	wpa_rtlogger_data_type_e datatype;			/* data type */
+} STRUCT_PACKED;
+
+
+/* Application's log-message payload element size */
+struct wpa_rtlogger_app_logmsgelem_len {
+	u32 datalen;								/* data length */
+} STRUCT_PACKED;
+
+
+/* Log-message payload elements alingment */
+#define WPA_RTLOGGER_LOGMSG_ELEM_WORD_ALINGMENT	(1)	/* 32-bit word alingment */
+#ifdef WPA_RTLOGGER_LOGMSG_ELEM_WORD_ALINGMENT
+#define WPA_RTLOGGER_LOGMSG_ELEM_SIZE(x)		((((x) + 3) >> 2) << 2)
+#else
+#define WPA_RTLOGGER_LOGMSG_ELEM_SIZE(x)		(x)
+#endif
+
+/* Log-message payload element string */
+#define WPA_RTLOGGER_LOGMSG_STRING_HEADER_SIZE													\
+			WPA_RTLOGGER_LOGMSG_ELEM_SIZE(sizeof(struct wpa_rtlogger_app_logmsgelem_type) +		\
+										  sizeof(struct wpa_rtlogger_app_logmsgelem_len))
+
+#define WPA_RTLOGGER_LOGMSG_STRING_SIZE(str)													\
+			WPA_RTLOGGER_LOGMSG_ELEM_SIZE(WPA_RTLOGGER_LOGMSG_STRING_HEADER_SIZE +				\
+										  str##len__)
+
+#define WPA_RTLOGGER_LOGMSG_PUT_STRING_HEADER(str)															\
+		((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_STRING;	\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);												\
+		((struct wpa_rtlogger_app_logmsgelem_len *) p__)->datalen = str##len__;								\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_len);
+
+#define WPA_RTLOGGER_LOGMSG_PUT_STRING(str)																	\
+		WPA_RTLOGGER_LOGMSG_PUT_STRING_HEADER(str)															\
+		memcpy(p__, str, str##len__);																		\
+		p__ += WPA_RTLOGGER_LOGMSG_ELEM_SIZE(str##len__);
+
+/* Log-message payload element scalar */
+#define WPA_RTLOGGER_LOGMSG_SCALAR_SIZE(val)													\
+			WPA_RTLOGGER_LOGMSG_ELEM_SIZE((sizeof(struct wpa_rtlogger_app_logmsgelem_type) +	\
+										   sizeof(val)))
+
+#ifdef WPA_RTLOGGER_LOGMSG_ELEM_WORD_ALINGMENT
+#define WPA_RTLOGGER_LOGMSG_PUT_INT8(val)																		\
+		{																										\
+			u32 __word32__ = (u32)val;																			\
+			((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT8;	\
+			p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);												\
+			*(u32 *)p__ = __word32__;																			\
+			p__ += sizeof(__word32__);																			\
+		}
+#else /* !WPA_RTLOGGER_LOGMSG_ELEM_WORD_ALINGMENT */
+#define WPA_RTLOGGER_LOGMSG_PUT_INT8(val)																	\
+		((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT8;	\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);												\
+		*(s8 *)p__ = val;																					\
+		p__ += sizeof(s8);
+#endif /* WPA_RTLOGGER_LOGMSG_ELEM_WORD_ALINGMENT */
+
+#define WPA_RTLOGGER_LOGMSG_PUT_INT32(val)																	\
+		((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT32;	\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);												\
+		*(s32 *)p__ = val;																					\
+		p__ += sizeof(s32);
+
+#define WPA_RTLOGGER_LOGMSG_PUT_INT64(val)																	\
+		((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT64;	\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);												\
+		*(s64 *)p__ = val;																					\
+		p__ += sizeof(s64);
+
+#define WPA_RTLOGGER_LOGMSG_PUT_POINTER(val)																	\
+		if (sizeof(val) = sizeof(s32))																			\
+			((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT32;	\
+		else /*if (sizeof(val) = sizeof(s64))*/																	\
+			((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_INT64;	\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);													\
+		memcpy(p__, &val, sizeof(val));																			\
+		p__ += sizeof(val);
+
+/* Log-message payload element MAC-address */
+#define WPA_RTLOGGER_LOGMSG_MACADDR_SIZE(addr)													\
+			WPA_RTLOGGER_LOGMSG_ELEM_SIZE((sizeof(struct wpa_rtlogger_app_logmsgelem_type) +	\
+										   6))		/* FIXME: to use define instead of digit */
+
+#define WPA_RTLOGGER_LOGMSG_PUT_MACADDR(addr)																	\
+		((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_MACADDR;	\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);													\
+		memcpy(p__, addr, 6);						/* FIXME: to use define instead of digit */					\
+		p__ += WPA_RTLOGGER_LOGMSG_ELEM_SIZE(6);	/* FIXME: to use define instead of digit */
+
+/* Log-message payload element IPv6-address */
+#define WPA_RTLOGGER_LOGMSG_IP6ADDR_SIZE(addr)													\
+			WPA_RTLOGGER_LOGMSG_ELEM_SIZE((sizeof(struct wpa_rtlogger_app_logmsgelem_type) +	\
+										   16))		/* FIXME: to use define instead of digit */
+
+#define WPA_RTLOGGER_LOGMSG_PUT_IP6ADDR(addr)																	\
+		((struct wpa_rtlogger_app_logmsgelem_type *) p__)->datatype = WPA_RTLOGGER_LOGMSG_DATA_TYPE_IP6ADDR;	\
+		p__ += sizeof(struct wpa_rtlogger_app_logmsgelem_type);													\
+		memcpy(p__, addr, 16);						/* FIXME: to use define instead of digit */					\
+		p__ += WPA_RTLOGGER_LOGMSG_ELEM_SIZE(16);	/* FIXME: to use define instead of digit */
+
+
+#ifdef CONFIG_NO_WPA_RTLOGGER
+#define wpa_rtlogger_get_if_num(args...)	(0)
+#define wpa_rtlogger_init(args...)
+#define wpa_rtlogger_deinit(args...)
+#define wpa_rtlogger_send_logevent(args...)
+#define wpa_rtlogger_get_flags(args...) 	(0)
+#define wpa_rtlogger_console_vlog(args...)
+#define wpa_rtlogger_remote_vlog(args...)
+#define wpa_rtlogger_console_log(args...)
+#define wpa_rtlogger_remote_log(args...)
+#else /* !CONFIG_NO_WPA_RTLOGGER */
+int wpa_rtlogger_get_if_num(struct wpa_rtlogger_config *cfg, const char *ifname);
+struct wpa_rtlogger_data * wpa_rtlogger_init(struct wpa_rtlogger_config *cfg);
+void wpa_rtlogger_deinit(struct wpa_rtlogger_data *wpa_rtlogger);
+int wpa_rtlogger_send_logevent(struct wpa_rtlogger_data *wpa_rtlogger,
+		   const u32 ids /* LID, OID, GID, FID */,
+		   const u32 timestamp, const void *data, const u16 data_len);
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+int wpa_rtlogger_get_flags(int level, int gid);
+void wpa_rtlogger_console_log(const wpa_rtlogger_log_type_e log_type,
+		   const char *fname, const int line_no, const char *log_level,
+		   const char *fmt, ...);
+/* FIXME: implement this code via script (like we have for WLAN driver) */
+void wpa_rtlogger_ilog1_d_9(const char *fname, const int dbg_level,
+		   const u8 oid, const u8 gid, const u8 fid, const u16 lid,
+		   const char *fmt, s32 d1);
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+int wpa_rtlogger_get_flags(int level);
+void wpa_rtlogger_console_vlog(const wpa_rtlogger_log_type_e log_type, const char *fmt, va_list args);
+void wpa_rtlogger_remote_vlog(const char *fmt, va_list args);
+void wpa_rtlogger_console_log(const wpa_rtlogger_log_type_e log_type, const char *fmt, ...);
+void wpa_rtlogger_remote_log(const char *fmt, ...);
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+#endif /* CONFIG_NO_WPA_RTLOGGER */
+
+
+#ifdef CONFIG_WPA_RTLOGGER_RUN_DEMO
+#define CLOG(fname, line_no, log_level, fmt, ...)	\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_INFO, fname, line_no, #log_level, fmt, ## __VA_ARGS__)
+#define CINFO(fname, line_no, fmt, ...)				\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_INFO, "", 0, "", fmt, ## __VA_ARGS__)
+#define CERROR(fname, line_no, fmt, ...)			\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_ERROR, fname, line_no, "E", fmt, ## __VA_ARGS__)
+#define CWARNING(fname, line_no, fmt, ...)			\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_WARNING, fname, line_no, "W", fmt, ## __VA_ARGS__)
+#else /* !CONFIG_WPA_RTLOGGER_RUN_DEMO */
+#define CLOG(fmt, ...)		\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_INFO, fmt, ## __VA_ARGS__)
+#define CINFO(fmt, ...)		\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_INFO, fmt, ## __VA_ARGS__)
+#define CERROR(fmt, ...)	\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_ERROR, fmt, ## __VA_ARGS__)
+#define CWARNING(fmt, ...)	\
+	wpa_rtlogger_console_log(WPA_RTLOGGER_LOG_TYPE_WARNING, fmt, ## __VA_ARGS__)
+#define RLOG(fmt, ...)		\
+	wpa_rtlogger_remote_log(fmt, ## __VA_ARGS__)
+#endif /* CONFIG_WPA_RTLOGGER_RUN_DEMO */
+
+#endif /* WPA_RTLOGGER_H */
diff --git a/wpa_supplicant/.config b/wpa_supplicant/.config
index d64c86c..40856ed 100644
--- a/wpa_supplicant/.config
+++ b/wpa_supplicant/.config
@@ -565,3 +565,7 @@ CONFIG_MBO=y
 
 # Support of WPA WDS. Requires WPA support (enabled by default).
 CONFIG_WDS_WPA_SUPPLICANT=y
+
+# Remove RT Logger's capabilities to reduce the size of supplicant code.
+# Disabled by default.
+#CONFIG_RTLOGGER=y
diff --git a/wpa_supplicant/.config.2build b/wpa_supplicant/.config.2build
new file mode 100644
index 0000000..a523ec9
--- /dev/null
+++ b/wpa_supplicant/.config.2build
@@ -0,0 +1,18 @@
+
+COREDIR := /home/toolchains/ugw/tag_built_7.2_pr1_20170524T155201-CV-05.04.00.74/openwrt/core
+
+TARGMIPSDIR := $(COREDIR)/build_dir/target-mips_mips32_uClibc-0.9.33.2_grx550_2000_mr_vdsl_lte_sec_gw_72
+TOOLMIPSDIR := $(COREDIR)/staging_dir/toolchain-mips_mips32_gcc-4.8-linaro_uClibc-0.9.33.2
+BINDIR := $(TOOLMIPSDIR)/bin
+LIBNL_INC := $(TARGMIPSDIR)/libnl-3.2.25/include
+
+CFLAGS += -I$(TOOLMIPSDIR)/include -I$(TARGMIPSDIR)/libnl-3.2.25/include \
+-I$(TARGMIPSDIR)/openssl-1.0.2h/include
+LDFLAGS += -L$(TARGMIPSDIR)/libnl-3.2.25/lib/.libs \
+-L$(TARGMIPSDIR)/openssl-1.0.2h
+IFX_LDFLAGS := $(LDFLAGS)
+
+CC := $(BINDIR)/mips-openwrt-linux-uclibc-gcc
+LD := $(BINDIR)/mips-openwrt-linux-uclibc-ld
+
+STRIP := $(BINDIR)/mips-openwrt-linux-uclibc-strip
diff --git a/wpa_supplicant/Makefile b/wpa_supplicant/Makefile
index dda3663..afd2427 100644
--- a/wpa_supplicant/Makefile
+++ b/wpa_supplicant/Makefile
@@ -113,6 +113,19 @@ OBJS_c += ../src/utils/common.o
 OBJS_c += ../src/common/cli.o
 OBJS += wmm_ac.o
 
+ifdef CONFIG_RTLOGGER
+OBJS += ../src/drivers/genetlink.o
+OBJS += ../src/utils/wpa_rtlogger.o
+LIBS_c += -lnl-genl-3 -lnl-3
+OBJS_c += ../src/drivers/genetlink.o
+OBJS_c += ../src/utils/wpa_rtlogger.o
+LIBS_p += -lnl-genl-3 -lnl-3
+OBJS_p += ../src/drivers/genetlink.o
+OBJS_p += ../src/utils/wpa_rtlogger.o
+else
+CFLAGS += -DCONFIG_NO_WPA_RTLOGGER
+endif
+
 ifndef CONFIG_OS
 ifdef CONFIG_NATIVE_WINDOWS
 CONFIG_OS=win32
@@ -153,6 +166,10 @@ endif
 OBJS += ../src/utils/$(CONFIG_ELOOP).o
 OBJS_c += ../src/utils/$(CONFIG_ELOOP).o
 
+ifdef CONFIG_RTLOGGER
+OBJS_p += ../src/utils/$(CONFIG_ELOOP).o
+endif
+
 ifndef CONFIG_OSX
 ifeq ($(CONFIG_ELOOP), eloop)
 # Using glibc < 2.17 requires -lrt for clock_gettime()
@@ -1705,7 +1722,13 @@ dynamic_eap_methods: $(EAPDYN)
 	fi
 	@touch ../src/crypto/build.wpa_supplicant
 
-BCHECK=../src/drivers/build.wpa_supplicant ../src/rsn_supp/build.wpa_supplicant ../src/common/build.wpa_supplicant ../src/wps/build.wpa_supplicant ../src/crypto/build.wpa_supplicant
+../src/utils/build.wpa_supplicant:
+	@if [ -f ../src/utils/build.hostapd ]; then \
+		$(MAKE) -C ../src/utils clean; \
+	fi
+	@touch ../src/utils/build.wpa_supplicant
+
+BCHECK=../src/drivers/build.wpa_supplicant ../src/rsn_supp/build.wpa_supplicant ../src/common/build.wpa_supplicant ../src/wps/build.wpa_supplicant ../src/crypto/build.wpa_supplicant ../src/utils/build.wpa_supplicant
 
 wpa_priv: $(BCHECK) $(OBJS_priv)
 	$(Q)$(LDO) $(LDFLAGS) -o wpa_priv $(OBJS_priv) $(LIBS)
diff --git a/wpa_supplicant/main.c b/wpa_supplicant/main.c
index e08c2fd..3f1bb31 100644
--- a/wpa_supplicant/main.c
+++ b/wpa_supplicant/main.c
@@ -349,6 +349,23 @@ int main(int argc, char *argv[])
 			   "wpa_supplicant");
 	}
 
+#ifndef CONFIG_NO_WPA_RTLOGGER
+	if (!iface_count) {
+		wpa_printf(MSG_ERROR, "No interface found (RT Logger)");
+		/*exitcode = -1;*/ /* to run w/o RT Logger as well */
+		/*goto out;*/ goto skip_rtlog_init;
+	}
+
+	global->rtlogger_data = wpa_supplicant_rtlogger_init(&global->rtlogger_config, ifaces[0].ifname);
+
+	if (global->rtlogger_data == NULL) {
+		wpa_printf(MSG_ERROR, "Failed to initialize RT Logger");
+		/*exitcode = -1;*/ /* to run w/o RT Logger as well */
+		/*goto out;*/
+	}
+skip_rtlog_init:
+#endif /* !CONFIG_NO_WPA_RTLOGGER */
+
 	if (fst_global_init()) {
 		wpa_printf(MSG_ERROR, "Failed to initialize FST");
 		exitcode = -1;
@@ -391,6 +408,10 @@ int main(int argc, char *argv[])
 	if (exitcode == 0)
 		exitcode = wpa_supplicant_run(global);
 
+#ifndef CONFIG_NO_WPA_RTLOGGER
+	wpa_supplicant_rtlogger_deinit(global->rtlogger_data);
+#endif /* !CONFIG_NO_WPA_RTLOGGER */
+
 	wpa_supplicant_deinit(global);
 
 	fst_global_deinit();
diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
index 4c643b7..464e46b 100644
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -27,6 +27,9 @@
 #include "eloop.h"
 #include "config.h"
 #include "utils/ext_password.h"
+#ifndef CONFIG_NO_WPA_RTLOGGER
+#include "utils/wpa_rtlogger.h"
+#endif /* !CONFIG_NO_WPA_RTLOGGER */
 #include "l2_packet/l2_packet.h"
 #include "wpa_supplicant_i.h"
 #include "driver_i.h"
@@ -5394,6 +5397,31 @@ static void wpas_periodic(void *eloop_ctx, void *timeout_ctx)
 }
 
 
+#ifndef CONFIG_NO_WPA_RTLOGGER
+struct wpa_rtlogger_data * wpa_supplicant_rtlogger_init(struct wpa_rtlogger_config *cfg, const char *ifname)
+{
+	if (wpa_rtlogger_get_if_num(cfg, ifname)) {
+		return NULL;
+	}
+
+	wpa_printf(MSG_INFO, "HW interface ID: %u", cfg->wlan_if);
+
+	cfg->is_static = TRUE;
+	cfg->ctx = NULL;
+	cfg->gid = WPA_RTLOGGER_APP_GID_WPASUPPLICANT;
+	os_snprintf(cfg->app_name, sizeof(WPA_RTLOGGER_APP_NAME_WPASUPPLICANT),
+				"%s", WPA_RTLOGGER_APP_NAME_WPASUPPLICANT);
+	return wpa_rtlogger_init(cfg);
+}
+
+
+void wpa_supplicant_rtlogger_deinit(struct wpa_rtlogger_data *data)
+{
+	wpa_rtlogger_deinit(data);
+}
+#endif /* CONFIG_NO_WPA_RTLOGGER */
+
+
 /**
  * wpa_supplicant_init - Initialize %wpa_supplicant
  * @params: Parameters for %wpa_supplicant
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index 72aece6..4542784 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -17,6 +17,11 @@
 #include "config_ssid.h"
 #include "wmm_ac.h"
 
+#ifndef CONFIG_NO_WPA_RTLOGGER
+#include "utils/wpa_rtlogger.h"
+#endif /* !CONFIG_NO_WPA_RTLOGGER */
+
+
 extern const char *const wpa_supplicant_version;
 extern const char *const wpa_supplicant_license;
 #ifndef CONFIG_NO_STDOUT_DEBUG
@@ -300,6 +305,11 @@ struct wpa_global {
 #endif /* CONFIG_WIFI_DISPLAY */
 
 	struct psk_list_entry *add_psk; /* From group formation */
+
+#ifndef CONFIG_NO_WPA_RTLOGGER
+	struct wpa_rtlogger_config rtlogger_config;
+	struct wpa_rtlogger_data *rtlogger_data;
+#endif
 };
 
 
@@ -1155,6 +1165,12 @@ struct wpa_global * wpa_supplicant_init(struct wpa_params *params);
 int wpa_supplicant_run(struct wpa_global *global);
 void wpa_supplicant_deinit(struct wpa_global *global);
 
+
+#ifndef CONFIG_NO_WPA_RTLOGGER
+struct wpa_rtlogger_data * wpa_supplicant_rtlogger_init(struct wpa_rtlogger_config *cfg, const char *ifname);
+void wpa_supplicant_rtlogger_deinit(struct wpa_rtlogger_data *data);
+#endif
+
 int wpa_supplicant_scard_init(struct wpa_supplicant *wpa_s,
 			      struct wpa_ssid *ssid);
 void wpa_supplicant_terminate_proc(struct wpa_global *global);
-- 
2.10.1

